(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "item" defined at debug.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"debug.ads" 4 0 0#"model_projected" "model_trace:3581" "name:Item" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put_line__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"debug.ads" 8 0 0#"model_projected" "name:Item" "model_trace:3604" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put_line__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put__2__item
 use import "_gnatprove_standard".Main

 function item #"debug.ads" 12 0 0#"model" "name:Item" "model_trace:3627" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at debug.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Debug__put__3__item
 use import "_gnatprove_standard".Main

 function item #"debug.ads" 20 0 0#"model" "name:Item" "model_trace:3664" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at debug.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Debug__put__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_8B =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_8B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_8B__ref =
  { mutable tinteger_8B__content "model_trace:" "name:" : tinteger_8B }
 
 function tinteger_8B__ref___projection 
   (a : tinteger_8B__ref) : tinteger_8B =
  a.tinteger_8B__content
 
 meta "model_projection" function tinteger_8B__ref___projection
 
 meta "inline : no" function tinteger_8B__ref___projection
 
 val tinteger_8B__havoc 
   (x : tinteger_8B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B__rep
 use        Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_8B.tinteger_8B) : int =
  (Interfaces__Tinteger_8B.tinteger_8B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_8B.tinteger_8B, 
 predicate in_range = Interfaces__Tinteger_8B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___2__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___2__projection
 
 meta "inline : no" function integer_8__ref___2__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8__rep
 use        Interfaces__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_8.integer_8) : int =
  (Interfaces__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_8.integer_8, 
 predicate in_range = Interfaces__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_16B =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_16B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_16B__ref =
  { mutable tinteger_16B__content "model_trace:" "name:" : tinteger_16B }
 
 function tinteger_16B__ref___projection 
   (a : tinteger_16B__ref) : tinteger_16B =
  a.tinteger_16B__content
 
 meta "model_projection" function tinteger_16B__ref___projection
 
 meta "inline : no" function tinteger_16B__ref___projection
 
 val tinteger_16B__havoc 
   (x : tinteger_16B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B__rep
 use        Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_16B.tinteger_16B) : int =
  (Interfaces__Tinteger_16B.tinteger_16B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_16B.tinteger_16B, 
 predicate in_range = Interfaces__Tinteger_16B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___2__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___2__projection
 
 meta "inline : no" function integer_16__ref___2__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16__rep
 use        Interfaces__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_16.integer_16) : int =
  (Interfaces__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_16.integer_16, 
 predicate in_range = Interfaces__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content "model_trace:" "name:" : tinteger_32B }
 
 function tinteger_32B__ref___projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref___projection
 
 meta "inline : no" function tinteger_32B__ref___projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___2__projection
 
 meta "inline : no" function integer_32__ref___2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_64B =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_64B__ref =
  { mutable tinteger_64B__content "model_trace:" "name:" : tinteger_64B }
 
 function tinteger_64B__ref___projection 
   (a : tinteger_64B__ref) : tinteger_64B =
  a.tinteger_64B__content
 
 meta "model_projection" function tinteger_64B__ref___projection
 
 meta "inline : no" function tinteger_64B__ref___projection
 
 val tinteger_64B__havoc 
   (x : tinteger_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B__rep
 use        Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__Tinteger_64B.tinteger_64B) : int =
  (Interfaces__Tinteger_64B.tinteger_64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_64B.tinteger_64B, 
 predicate in_range = Interfaces__Tinteger_64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___2__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___2__projection
 
 meta "inline : no" function integer_64__ref___2__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64__rep
 use        Interfaces__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Interfaces__integer_64.integer_64) : int =
  (Interfaces__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_64.integer_64, 
 predicate in_range = Interfaces__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type unsigned_8 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV8.t
 
 function first 
   : BV8.t =
  ( 0 : BV8.t )
 
 function last 
   : BV8.t =
  ( 255 : BV8.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  255
 
 predicate in_range 
   (x : BV8.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = unsigned_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_8__ref =
  { mutable unsigned_8__content "model_trace:" "name:" : unsigned_8 }
 
 function unsigned_8__ref___projection 
   (a : unsigned_8__ref) : unsigned_8 =
  a.unsigned_8__content
 
 meta "model_projection" function unsigned_8__ref___projection
 
 meta "inline : no" function unsigned_8__ref___projection
 
 val unsigned_8__havoc 
   (x : unsigned_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8__rep
 use        Interfaces__unsigned_8
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = Interfaces__unsigned_8.unsigned_8, 
 predicate in_range = Interfaces__unsigned_8.in_range, 
 predicate in_range_int = Interfaces__unsigned_8.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type unsigned_16 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV16.t
 
 function first 
   : BV16.t =
  ( 0 : BV16.t )
 
 function last 
   : BV16.t =
  ( 65535 : BV16.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  65535
 
 predicate in_range 
   (x : BV16.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = unsigned_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_16__ref =
  { mutable unsigned_16__content "model_trace:" "name:" : unsigned_16 }
 
 function unsigned_16__ref___projection 
   (a : unsigned_16__ref) : unsigned_16 =
  a.unsigned_16__content
 
 meta "model_projection" function unsigned_16__ref___projection
 
 meta "inline : no" function unsigned_16__ref___projection
 
 val unsigned_16__havoc 
   (x : unsigned_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16__rep
 use        Interfaces__unsigned_16
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = Interfaces__unsigned_16.unsigned_16, 
 predicate in_range = Interfaces__unsigned_16.in_range, 
 predicate in_range_int = Interfaces__unsigned_16.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_24 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t =
  ( 16777216 : BV32.t )
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 16777215 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  16777215
 
 predicate in_range 
   (x : BV32.t)  =
  ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int 
   (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = unsigned_24, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type unsigned_24__ref =
  { mutable unsigned_24__content "model_trace:" "name:" : unsigned_24 }
 
 function unsigned_24__ref___projection 
   (a : unsigned_24__ref) : unsigned_24 =
  a.unsigned_24__content
 
 meta "model_projection" function unsigned_24__ref___projection
 
 meta "inline : no" function unsigned_24__ref___projection
 
 val unsigned_24__havoc 
   (x : unsigned_24__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24__rep
 use        Interfaces__unsigned_24
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV32 with
 type t = Interfaces__unsigned_24.unsigned_24, 
 predicate in_range = Interfaces__unsigned_24.in_range, 
 predicate in_range_int = Interfaces__unsigned_24.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__unsigned_24.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_32 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV32.t
 
 function first 
   : BV32.t =
  ( 0 : BV32.t )
 
 function last 
   : BV32.t =
  ( 4294967295 : BV32.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  4294967295
 
 predicate in_range 
   (x : BV32.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = unsigned_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_32__ref =
  { mutable unsigned_32__content "model_trace:" "name:" : unsigned_32 }
 
 function unsigned_32__ref___projection 
   (a : unsigned_32__ref) : unsigned_32 =
  a.unsigned_32__content
 
 meta "model_projection" function unsigned_32__ref___projection
 
 meta "inline : no" function unsigned_32__ref___projection
 
 val unsigned_32__havoc 
   (x : unsigned_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32__rep
 use        Interfaces__unsigned_32
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV32 with
 type t = Interfaces__unsigned_32.unsigned_32, 
 predicate in_range = Interfaces__unsigned_32.in_range, 
 predicate in_range_int = Interfaces__unsigned_32.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type unsigned_64 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = unsigned_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_64__ref =
  { mutable unsigned_64__content "model_trace:" "name:" : unsigned_64 }
 
 function unsigned_64__ref___projection 
   (a : unsigned_64__ref) : unsigned_64 =
  a.unsigned_64__content
 
 meta "model_projection" function unsigned_64__ref___projection
 
 meta "inline : no" function unsigned_64__ref___projection
 
 val unsigned_64__havoc 
   (x : unsigned_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64__rep
 use        Interfaces__unsigned_64
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__unsigned_64.unsigned_64, 
 predicate in_range = Interfaces__unsigned_64.in_range, 
 predicate in_range_int = Interfaces__unsigned_64.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "value" defined at interfac.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 82 0 0#"model" "model_trace:5780" "name:Value" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 83 0 0#"model" "model_trace:5789" "name:Amount" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 86 0 0#"model" "name:Value" "model_trace:5808" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 87 0 0#"model" "name:Amount" "model_trace:5817" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 90 0 0#"model" "name:Value" "model_trace:5836" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 91 0 0#"model" "name:Amount" "model_trace:5845" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 94 0 0#"model" "name:Value" "model_trace:5864" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 95 0 0#"model" "name:Amount" "model_trace:5873" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 98 0 0#"model" "name:Value" "model_trace:5892" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 99 0 0#"model" "name:Amount" "model_trace:5901" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 102 0 0#"model" "name:Value" "model_trace:5920" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 103 0 0#"model" "name:Amount" "model_trace:5929" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 106 0 0#"model" "name:Value" "model_trace:5948" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 107 0 0#"model" "name:Amount" "model_trace:5957" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 110 0 0#"model" "name:Value" "model_trace:5976" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 111 0 0#"model" "name:Amount" "model_trace:5985" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 114 0 0#"model" "name:Value" "model_trace:6004" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 115 0 0#"model" "name:Amount" "model_trace:6013" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 118 0 0#"model" "name:Value" "model_trace:6032" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 119 0 0#"model" "name:Amount" "model_trace:6041" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 122 0 0#"model" "name:Value" "model_trace:6060" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 123 0 0#"model" "name:Amount" "model_trace:6069" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 126 0 0#"model" "name:Value" "model_trace:6088" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 127 0 0#"model" "name:Amount" "model_trace:6097" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:127, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 130 0 0#"model" "name:Value" "model_trace:6116" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 131 0 0#"model" "name:Amount" "model_trace:6125" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 134 0 0#"model" "name:Value" "model_trace:6144" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 135 0 0#"model" "name:Amount" "model_trace:6153" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 138 0 0#"model" "name:Value" "model_trace:6172" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 139 0 0#"model" "name:Amount" "model_trace:6181" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 142 0 0#"model" "name:Value" "model_trace:6200" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 143 0 0#"model" "name:Amount" "model_trace:6209" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 146 0 0#"model" "name:Value" "model_trace:6228" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 147 0 0#"model" "name:Amount" "model_trace:6237" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 150 0 0#"model" "name:Value" "model_trace:6256" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 151 0 0#"model" "name:Amount" "model_trace:6265" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 154 0 0#"model" "name:Value" "model_trace:6284" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 155 0 0#"model" "name:Amount" "model_trace:6293" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 158 0 0#"model" "name:Value" "model_trace:6312" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 159 0 0#"model" "name:Amount" "model_trace:6321" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tieee_float_32B 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = tieee_float_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_32B__ref =
  { mutable tieee_float_32B__content "model_trace:" "name:" : tieee_float_32B }
 
 function tieee_float_32B__ref___projection 
   (a : tieee_float_32B__ref) : tieee_float_32B =
  a.tieee_float_32B__content
 
 meta "model_projection" function tieee_float_32B__ref___projection
 
 meta "inline : no" function tieee_float_32B__ref___projection
 
 val tieee_float_32B__havoc 
   (x : tieee_float_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B__rep
 use        Interfaces__Tieee_float_32B
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__Tieee_float_32B.tieee_float_32B, 
 predicate in_range = Interfaces__Tieee_float_32B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type ieee_float_32 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = ieee_float_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_32__ref =
  { mutable ieee_float_32__content "model_trace:" "name:" : ieee_float_32 }
 
 function ieee_float_32__ref___projection 
   (a : ieee_float_32__ref) : ieee_float_32 =
  a.ieee_float_32__content
 
 meta "model_projection" function ieee_float_32__ref___projection
 
 meta "inline : no" function ieee_float_32__ref___projection
 
 val ieee_float_32__havoc 
   (x : ieee_float_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32__rep
 use        Interfaces__ieee_float_32
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__ieee_float_32.ieee_float_32, 
 predicate in_range = Interfaces__ieee_float_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type tieee_float_64B 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = tieee_float_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_64B__ref =
  { mutable tieee_float_64B__content "model_trace:" "name:" : tieee_float_64B }
 
 function tieee_float_64B__ref___projection 
   (a : tieee_float_64B__ref) : tieee_float_64B =
  a.tieee_float_64B__content
 
 meta "model_projection" function tieee_float_64B__ref___projection
 
 meta "inline : no" function tieee_float_64B__ref___projection
 
 val tieee_float_64B__havoc 
   (x : tieee_float_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B__rep
 use        Interfaces__Tieee_float_64B
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__Tieee_float_64B.tieee_float_64B, 
 predicate in_range = Interfaces__Tieee_float_64B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type ieee_float_64 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = ieee_float_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_64__ref =
  { mutable ieee_float_64__content "model_trace:" "name:" : ieee_float_64 }
 
 function ieee_float_64__ref___projection 
   (a : ieee_float_64__ref) : ieee_float_64 =
  a.ieee_float_64__content
 
 meta "model_projection" function ieee_float_64__ref___projection
 
 meta "inline : no" function ieee_float_64__ref___projection
 
 val ieee_float_64__havoc 
   (x : ieee_float_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64__rep
 use        Interfaces__ieee_float_64
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__ieee_float_64.ieee_float_64, 
 predicate in_range = Interfaces__ieee_float_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  0
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type name__ref =
  { mutable name__content "model_trace:" "name:" : name }
 
 function name__ref___projection 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc 
   (x : name__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name__rep
 use        System__name
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__name.name, 
 predicate in_range = System__name.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0#"model" "model_trace:4047" "name:System_Name" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type address__ref =
  { mutable address__content "model_trace:" "name:" : address }
 
 function address__ref___projection 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc 
   (x : address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address__rep
 use        System__address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__address.address, 
 predicate in_range = System__address.in_range, 
 predicate in_range_int = System__address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_address #"system.ads" 69 0 0#"model" "model_trace:4169" "name:Null_Address" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 77 0 0#"model" "model_trace:4216" "name:Left" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 77 0 0#"model" "model_trace:4223" "name:Right" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function olt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate olt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 78 0 0#"model" "name:Left" "model_trace:4243" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 78 0 0#"model" "name:Right" "model_trace:4250" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ole 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ole__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 79 0 0#"model" "name:Left" "model_trace:4270" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 79 0 0#"model" "name:Right" "model_trace:4277" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ogt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ogt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 80 0 0#"model" "name:Left" "model_trace:4297" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 80 0 0#"model" "name:Right" "model_trace:4304" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oge 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oge__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 81 0 0#"model" "name:Left" "model_trace:4324" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 81 0 0#"model" "name:Right" "model_trace:4331" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oeq 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oeq__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bit_order__ref =
  { mutable bit_order__content "model_trace:" "name:" : bit_order }
 
 function bit_order__ref___projection 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order__rep
 use        System__bit_order
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__bit_order.bit_order, 
 predicate in_range = System__bit_order.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0#"model" "model_trace:4398" "name:Default_Bit_Order" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0#"model" "model_trace:4414" "name:Max_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0#"model" "model_trace:4424" "name:Max_Interrupt_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content "model_trace:" "name:" : any_priority }
 
 function any_priority__ref___projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority =
  < range 0 30 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  30
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content "model_trace:" "name:" : priority }
 
 function priority__ref___projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 function first 
   : int =
  31
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content "model_trace:" "name:" : interrupt_priority }
 
 function interrupt_priority__ref___projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0#"model" "model_trace:4476" "name:Default_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0#"model" "model_trace:4506" "name:Backend_Divide_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0#"model" "model_trace:4516" "name:Backend_Overflow_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0#"model" "model_trace:4526" "name:Command_Line_Args" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0#"model" "model_trace:4536" "name:Configurable_Run_Time" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0#"model" "model_trace:4546" "name:Denorm" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0#"model" "model_trace:4556" "name:Duration_32_Bits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0#"model" "model_trace:4566" "name:Exit_Status_Supported" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0#"model" "model_trace:4576" "name:Fractional_Fixed_Ops" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0#"model" "model_trace:4586" "name:Frontend_Layout" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0#"model" "model_trace:4596" "name:Machine_Overflows" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0#"model" "model_trace:4606" "name:Machine_Rounds" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0#"model" "model_trace:4616" "name:Preallocated_Stacks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0#"model" "model_trace:4626" "name:Signed_Zeros" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0#"model" "model_trace:4636" "name:Stack_Check_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0#"model" "model_trace:4646" "name:Stack_Check_Probes" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0#"model" "model_trace:4656" "name:Stack_Check_Limits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0#"model" "model_trace:4666" "name:Support_Aggregates" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0#"model" "model_trace:4676" "name:Support_Atomic_Primitives" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0#"model" "model_trace:4686" "name:Support_Composite_Assign" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0#"model" "model_trace:4696" "name:Support_Composite_Compare" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0#"model" "model_trace:4706" "name:Support_Long_Shifts" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0#"model" "model_trace:4716" "name:Always_Compatible_Rep" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0#"model" "model_trace:4726" "name:Suppress_Standard_Library" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0#"model" "model_trace:4736" "name:Use_Ada_Main_Program_Name" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0#"model" "model_trace:4746" "name:Frontend_Exceptions" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0#"model" "model_trace:4756" "name:ZCX_By_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref =
  { mutable tpriorities_mappingB__content "model_trace:" "name:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s__rep
 use        System__T3s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__T3s.t3s) : int =
  (System__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__T3s.t3s, 
 predicate in_range = System__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0#"model_projected" "model_trace:4782" "name:Underlying_Priorities" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nul" defined at a-chlat1.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nul
 use import "_gnatprove_standard".Main

 function nul #"a-chlat1.ads" 25 0 0#"model" "model_trace:6451" "name:NUL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "soh" defined at a-chlat1.ads:26, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__soh
 use import "_gnatprove_standard".Main

 function soh #"a-chlat1.ads" 26 0 0#"model" "model_trace:6464" "name:SOH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stx" defined at a-chlat1.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__stx
 use import "_gnatprove_standard".Main

 function stx #"a-chlat1.ads" 27 0 0#"model" "model_trace:6477" "name:STX" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "etx" defined at a-chlat1.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__etx
 use import "_gnatprove_standard".Main

 function etx #"a-chlat1.ads" 28 0 0#"model" "model_trace:6490" "name:ETX" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "eot" defined at a-chlat1.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__eot
 use import "_gnatprove_standard".Main

 function eot #"a-chlat1.ads" 29 0 0#"model" "model_trace:6503" "name:EOT" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "enq" defined at a-chlat1.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__enq
 use import "_gnatprove_standard".Main

 function enq #"a-chlat1.ads" 30 0 0#"model" "model_trace:6516" "name:ENQ" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ack" defined at a-chlat1.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ack
 use import "_gnatprove_standard".Main

 function ack #"a-chlat1.ads" 31 0 0#"model" "model_trace:6529" "name:ACK" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "bel" defined at a-chlat1.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__bel
 use import "_gnatprove_standard".Main

 function bel #"a-chlat1.ads" 32 0 0#"model" "model_trace:6542" "name:BEL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "bs" defined at a-chlat1.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__bs
 use import "_gnatprove_standard".Main

 function bs #"a-chlat1.ads" 33 0 0#"model" "model_trace:6555" "name:BS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ht" defined at a-chlat1.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ht
 use import "_gnatprove_standard".Main

 function ht #"a-chlat1.ads" 34 0 0#"model" "model_trace:6568" "name:HT" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lf" defined at a-chlat1.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lf
 use import "_gnatprove_standard".Main

 function lf #"a-chlat1.ads" 35 0 0#"model" "model_trace:6581" "name:LF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "vt" defined at a-chlat1.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__vt
 use import "_gnatprove_standard".Main

 function vt #"a-chlat1.ads" 36 0 0#"model" "model_trace:6594" "name:VT" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ff" defined at a-chlat1.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ff
 use import "_gnatprove_standard".Main

 function ff #"a-chlat1.ads" 37 0 0#"model" "model_trace:6607" "name:FF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cr" defined at a-chlat1.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cr
 use import "_gnatprove_standard".Main

 function cr #"a-chlat1.ads" 38 0 0#"model" "model_trace:6620" "name:CR" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "so" defined at a-chlat1.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__so
 use import "_gnatprove_standard".Main

 function so__ #"a-chlat1.ads" 39 0 0#"model" "model_trace:6633" "name:SO" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "si" defined at a-chlat1.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__si
 use import "_gnatprove_standard".Main

 function si #"a-chlat1.ads" 40 0 0#"model" "model_trace:6646" "name:SI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dle" defined at a-chlat1.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dle
 use import "_gnatprove_standard".Main

 function dle #"a-chlat1.ads" 42 0 0#"model" "model_trace:6659" "name:DLE" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc1" defined at a-chlat1.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc1
 use import "_gnatprove_standard".Main

 function dc1 #"a-chlat1.ads" 43 0 0#"model" "model_trace:6672" "name:DC1" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc2" defined at a-chlat1.ads:44, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc2
 use import "_gnatprove_standard".Main

 function dc2 #"a-chlat1.ads" 44 0 0#"model" "model_trace:6685" "name:DC2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc3" defined at a-chlat1.ads:45, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc3
 use import "_gnatprove_standard".Main

 function dc3 #"a-chlat1.ads" 45 0 0#"model" "model_trace:6698" "name:DC3" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dc4" defined at a-chlat1.ads:46, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dc4
 use import "_gnatprove_standard".Main

 function dc4 #"a-chlat1.ads" 46 0 0#"model" "model_trace:6711" "name:DC4" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nak" defined at a-chlat1.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nak
 use import "_gnatprove_standard".Main

 function nak #"a-chlat1.ads" 47 0 0#"model" "model_trace:6724" "name:NAK" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "syn" defined at a-chlat1.ads:48, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__syn
 use import "_gnatprove_standard".Main

 function syn #"a-chlat1.ads" 48 0 0#"model" "model_trace:6737" "name:SYN" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "etb" defined at a-chlat1.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__etb
 use import "_gnatprove_standard".Main

 function etb #"a-chlat1.ads" 49 0 0#"model" "model_trace:6750" "name:ETB" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "can" defined at a-chlat1.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__can
 use import "_gnatprove_standard".Main

 function can #"a-chlat1.ads" 50 0 0#"model" "model_trace:6763" "name:CAN" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "em" defined at a-chlat1.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__em
 use import "_gnatprove_standard".Main

 function em #"a-chlat1.ads" 51 0 0#"model" "model_trace:6776" "name:EM" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sub" defined at a-chlat1.ads:52, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sub
 use import "_gnatprove_standard".Main

 function sub #"a-chlat1.ads" 52 0 0#"model" "model_trace:6789" "name:SUB" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "esc" defined at a-chlat1.ads:53, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__esc
 use import "_gnatprove_standard".Main

 function esc #"a-chlat1.ads" 53 0 0#"model" "model_trace:6802" "name:ESC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fs" defined at a-chlat1.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fs
 use import "_gnatprove_standard".Main

 function fs #"a-chlat1.ads" 54 0 0#"model" "model_trace:6815" "name:FS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "gs" defined at a-chlat1.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__gs
 use import "_gnatprove_standard".Main

 function gs #"a-chlat1.ads" 55 0 0#"model" "model_trace:6828" "name:GS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "rs" defined at a-chlat1.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__rs
 use import "_gnatprove_standard".Main

 function rs #"a-chlat1.ads" 56 0 0#"model" "model_trace:6841" "name:RS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "us" defined at a-chlat1.ads:57, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__us
 use import "_gnatprove_standard".Main

 function us #"a-chlat1.ads" 57 0 0#"model" "model_trace:6854" "name:US" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "space" defined at a-chlat1.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__space
 use import "_gnatprove_standard".Main

 function space #"a-chlat1.ads" 63 0 0#"model" "model_trace:6867" "name:Space" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "exclamation" defined at a-chlat1.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__exclamation
 use import "_gnatprove_standard".Main

 function exclamation #"a-chlat1.ads" 64 0 0#"model" "model_trace:6877" "name:Exclamation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "quotation" defined at a-chlat1.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__quotation
 use import "_gnatprove_standard".Main

 function quotation #"a-chlat1.ads" 65 0 0#"model" "model_trace:6887" "name:Quotation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "number_sign" defined at a-chlat1.ads:66, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__number_sign
 use import "_gnatprove_standard".Main

 function number_sign #"a-chlat1.ads" 66 0 0#"model" "model_trace:6897" "name:Number_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dollar_sign" defined at a-chlat1.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dollar_sign
 use import "_gnatprove_standard".Main

 function dollar_sign #"a-chlat1.ads" 67 0 0#"model" "model_trace:6907" "name:Dollar_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "percent_sign" defined at a-chlat1.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__percent_sign
 use import "_gnatprove_standard".Main

 function percent_sign #"a-chlat1.ads" 68 0 0#"model" "model_trace:6917" "name:Percent_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ampersand" defined at a-chlat1.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ampersand
 use import "_gnatprove_standard".Main

 function ampersand #"a-chlat1.ads" 69 0 0#"model" "model_trace:6927" "name:Ampersand" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "apostrophe" defined at a-chlat1.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__apostrophe
 use import "_gnatprove_standard".Main

 function apostrophe #"a-chlat1.ads" 70 0 0#"model" "model_trace:6937" "name:Apostrophe" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_parenthesis" defined at a-chlat1.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_parenthesis
 use import "_gnatprove_standard".Main

 function left_parenthesis #"a-chlat1.ads" 71 0 0#"model" "model_trace:6947" "name:Left_Parenthesis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_parenthesis" defined at a-chlat1.ads:72, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_parenthesis
 use import "_gnatprove_standard".Main

 function right_parenthesis #"a-chlat1.ads" 72 0 0#"model" "model_trace:6957" "name:Right_Parenthesis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "asterisk" defined at a-chlat1.ads:73, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__asterisk
 use import "_gnatprove_standard".Main

 function asterisk #"a-chlat1.ads" 73 0 0#"model" "model_trace:6967" "name:Asterisk" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "plus_sign" defined at a-chlat1.ads:74, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__plus_sign
 use import "_gnatprove_standard".Main

 function plus_sign #"a-chlat1.ads" 74 0 0#"model" "model_trace:6977" "name:Plus_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "comma" defined at a-chlat1.ads:75, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__comma
 use import "_gnatprove_standard".Main

 function comma #"a-chlat1.ads" 75 0 0#"model" "model_trace:6987" "name:Comma" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "hyphen" defined at a-chlat1.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__hyphen
 use import "_gnatprove_standard".Main

 function hyphen #"a-chlat1.ads" 76 0 0#"model" "model_trace:6997" "name:Hyphen" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "full_stop" defined at a-chlat1.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__full_stop
 use import "_gnatprove_standard".Main

 function full_stop #"a-chlat1.ads" 78 0 0#"model" "model_trace:7017" "name:Full_Stop" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "solidus" defined at a-chlat1.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__solidus
 use import "_gnatprove_standard".Main

 function solidus #"a-chlat1.ads" 79 0 0#"model" "model_trace:7027" "name:Solidus" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "colon" defined at a-chlat1.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__colon
 use import "_gnatprove_standard".Main

 function colon #"a-chlat1.ads" 83 0 0#"model" "model_trace:7037" "name:Colon" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "semicolon" defined at a-chlat1.ads:84, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__semicolon
 use import "_gnatprove_standard".Main

 function semicolon #"a-chlat1.ads" 84 0 0#"model" "model_trace:7047" "name:Semicolon" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "less_than_sign" defined at a-chlat1.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__less_than_sign
 use import "_gnatprove_standard".Main

 function less_than_sign #"a-chlat1.ads" 85 0 0#"model" "model_trace:7057" "name:Less_Than_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "equals_sign" defined at a-chlat1.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__equals_sign
 use import "_gnatprove_standard".Main

 function equals_sign #"a-chlat1.ads" 86 0 0#"model" "model_trace:7067" "name:Equals_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "greater_than_sign" defined at a-chlat1.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__greater_than_sign
 use import "_gnatprove_standard".Main

 function greater_than_sign #"a-chlat1.ads" 87 0 0#"model" "model_trace:7077" "name:Greater_Than_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "question" defined at a-chlat1.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__question
 use import "_gnatprove_standard".Main

 function question #"a-chlat1.ads" 88 0 0#"model" "model_trace:7087" "name:Question" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "commercial_at" defined at a-chlat1.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__commercial_at
 use import "_gnatprove_standard".Main

 function commercial_at #"a-chlat1.ads" 89 0 0#"model" "model_trace:7097" "name:Commercial_At" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_square_bracket" defined at a-chlat1.ads:93, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_square_bracket
 use import "_gnatprove_standard".Main

 function left_square_bracket #"a-chlat1.ads" 93 0 0#"model" "model_trace:7107" "name:Left_Square_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reverse_solidus" defined at a-chlat1.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reverse_solidus
 use import "_gnatprove_standard".Main

 function reverse_solidus #"a-chlat1.ads" 94 0 0#"model" "model_trace:7117" "name:Reverse_Solidus" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_square_bracket" defined at a-chlat1.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_square_bracket
 use import "_gnatprove_standard".Main

 function right_square_bracket #"a-chlat1.ads" 95 0 0#"model" "model_trace:7127" "name:Right_Square_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "circumflex" defined at a-chlat1.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__circumflex
 use import "_gnatprove_standard".Main

 function circumflex #"a-chlat1.ads" 96 0 0#"model" "model_trace:7137" "name:Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "low_line" defined at a-chlat1.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__low_line
 use import "_gnatprove_standard".Main

 function low_line #"a-chlat1.ads" 97 0 0#"model" "model_trace:7147" "name:Low_Line" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "grave" defined at a-chlat1.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__grave
 use import "_gnatprove_standard".Main

 function grave #"a-chlat1.ads" 99 0 0#"model" "model_trace:7157" "name:Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a" defined at a-chlat1.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a
 use import "_gnatprove_standard".Main

 function lc_a #"a-chlat1.ads" 100 0 0#"model" "model_trace:7167" "name:LC_A" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_b" defined at a-chlat1.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_b
 use import "_gnatprove_standard".Main

 function lc_b #"a-chlat1.ads" 101 0 0#"model" "model_trace:7177" "name:LC_B" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_c" defined at a-chlat1.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_c
 use import "_gnatprove_standard".Main

 function lc_c #"a-chlat1.ads" 102 0 0#"model" "model_trace:7187" "name:LC_C" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_d" defined at a-chlat1.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_d
 use import "_gnatprove_standard".Main

 function lc_d #"a-chlat1.ads" 103 0 0#"model" "model_trace:7197" "name:LC_D" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e" defined at a-chlat1.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e
 use import "_gnatprove_standard".Main

 function lc_e #"a-chlat1.ads" 104 0 0#"model" "model_trace:7207" "name:LC_E" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_f" defined at a-chlat1.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_f
 use import "_gnatprove_standard".Main

 function lc_f #"a-chlat1.ads" 105 0 0#"model" "model_trace:7217" "name:LC_F" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_g" defined at a-chlat1.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_g
 use import "_gnatprove_standard".Main

 function lc_g #"a-chlat1.ads" 106 0 0#"model" "model_trace:7227" "name:LC_G" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_h" defined at a-chlat1.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_h
 use import "_gnatprove_standard".Main

 function lc_h #"a-chlat1.ads" 107 0 0#"model" "model_trace:7237" "name:LC_H" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i" defined at a-chlat1.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i
 use import "_gnatprove_standard".Main

 function lc_i #"a-chlat1.ads" 108 0 0#"model" "model_trace:7247" "name:LC_I" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_j" defined at a-chlat1.ads:109, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_j
 use import "_gnatprove_standard".Main

 function lc_j #"a-chlat1.ads" 109 0 0#"model" "model_trace:7257" "name:LC_J" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_k" defined at a-chlat1.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_k
 use import "_gnatprove_standard".Main

 function lc_k #"a-chlat1.ads" 110 0 0#"model" "model_trace:7267" "name:LC_K" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_l" defined at a-chlat1.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_l
 use import "_gnatprove_standard".Main

 function lc_l #"a-chlat1.ads" 111 0 0#"model" "model_trace:7277" "name:LC_L" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_m" defined at a-chlat1.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_m
 use import "_gnatprove_standard".Main

 function lc_m #"a-chlat1.ads" 112 0 0#"model" "model_trace:7287" "name:LC_M" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_n" defined at a-chlat1.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_n
 use import "_gnatprove_standard".Main

 function lc_n #"a-chlat1.ads" 113 0 0#"model" "model_trace:7297" "name:LC_N" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o" defined at a-chlat1.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o
 use import "_gnatprove_standard".Main

 function lc_o #"a-chlat1.ads" 114 0 0#"model" "model_trace:7307" "name:LC_O" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_p" defined at a-chlat1.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_p
 use import "_gnatprove_standard".Main

 function lc_p #"a-chlat1.ads" 115 0 0#"model" "model_trace:7317" "name:LC_P" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_q" defined at a-chlat1.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_q
 use import "_gnatprove_standard".Main

 function lc_q #"a-chlat1.ads" 116 0 0#"model" "model_trace:7327" "name:LC_Q" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_r" defined at a-chlat1.ads:117, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_r
 use import "_gnatprove_standard".Main

 function lc_r #"a-chlat1.ads" 117 0 0#"model" "model_trace:7337" "name:LC_R" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_s" defined at a-chlat1.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_s
 use import "_gnatprove_standard".Main

 function lc_s #"a-chlat1.ads" 118 0 0#"model" "model_trace:7347" "name:LC_S" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_t" defined at a-chlat1.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_t
 use import "_gnatprove_standard".Main

 function lc_t #"a-chlat1.ads" 119 0 0#"model" "model_trace:7357" "name:LC_T" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u" defined at a-chlat1.ads:120, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u
 use import "_gnatprove_standard".Main

 function lc_u #"a-chlat1.ads" 120 0 0#"model" "model_trace:7367" "name:LC_U" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_v" defined at a-chlat1.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_v
 use import "_gnatprove_standard".Main

 function lc_v #"a-chlat1.ads" 121 0 0#"model" "model_trace:7377" "name:LC_V" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_w" defined at a-chlat1.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_w
 use import "_gnatprove_standard".Main

 function lc_w #"a-chlat1.ads" 122 0 0#"model" "model_trace:7387" "name:LC_W" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_x" defined at a-chlat1.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_x
 use import "_gnatprove_standard".Main

 function lc_x #"a-chlat1.ads" 123 0 0#"model" "model_trace:7397" "name:LC_X" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_y" defined at a-chlat1.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_y
 use import "_gnatprove_standard".Main

 function lc_y #"a-chlat1.ads" 124 0 0#"model" "model_trace:7407" "name:LC_Y" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_z" defined at a-chlat1.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_z
 use import "_gnatprove_standard".Main

 function lc_z #"a-chlat1.ads" 125 0 0#"model" "model_trace:7417" "name:LC_Z" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_curly_bracket" defined at a-chlat1.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_curly_bracket
 use import "_gnatprove_standard".Main

 function left_curly_bracket #"a-chlat1.ads" 126 0 0#"model" "model_trace:7427" "name:Left_Curly_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "vertical_line" defined at a-chlat1.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__vertical_line
 use import "_gnatprove_standard".Main

 function vertical_line #"a-chlat1.ads" 127 0 0#"model" "model_trace:7437" "name:Vertical_Line" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_curly_bracket" defined at a-chlat1.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_curly_bracket
 use import "_gnatprove_standard".Main

 function right_curly_bracket #"a-chlat1.ads" 128 0 0#"model" "model_trace:7447" "name:Right_Curly_Bracket" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "tilde" defined at a-chlat1.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__tilde
 use import "_gnatprove_standard".Main

 function tilde #"a-chlat1.ads" 129 0 0#"model" "model_trace:7457" "name:Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "del" defined at a-chlat1.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__del
 use import "_gnatprove_standard".Main

 function del #"a-chlat1.ads" 130 0 0#"model" "model_trace:7467" "name:DEL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_128" defined at a-chlat1.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_128
 use import "_gnatprove_standard".Main

 function reserved_128 #"a-chlat1.ads" 141 0 0#"model" "model_trace:7520" "name:Reserved_128" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_129" defined at a-chlat1.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_129
 use import "_gnatprove_standard".Main

 function reserved_129 #"a-chlat1.ads" 142 0 0#"model" "model_trace:7533" "name:Reserved_129" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "bph" defined at a-chlat1.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__bph
 use import "_gnatprove_standard".Main

 function bph #"a-chlat1.ads" 143 0 0#"model" "model_trace:7546" "name:BPH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nbh" defined at a-chlat1.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nbh
 use import "_gnatprove_standard".Main

 function nbh #"a-chlat1.ads" 144 0 0#"model" "model_trace:7559" "name:NBH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_132" defined at a-chlat1.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_132
 use import "_gnatprove_standard".Main

 function reserved_132 #"a-chlat1.ads" 145 0 0#"model" "model_trace:7572" "name:Reserved_132" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "nel" defined at a-chlat1.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__nel
 use import "_gnatprove_standard".Main

 function nel #"a-chlat1.ads" 146 0 0#"model" "model_trace:7585" "name:NEL" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ssa" defined at a-chlat1.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ssa
 use import "_gnatprove_standard".Main

 function ssa #"a-chlat1.ads" 147 0 0#"model" "model_trace:7598" "name:SSA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "esa" defined at a-chlat1.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__esa
 use import "_gnatprove_standard".Main

 function esa #"a-chlat1.ads" 148 0 0#"model" "model_trace:7611" "name:ESA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "hts" defined at a-chlat1.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__hts
 use import "_gnatprove_standard".Main

 function hts #"a-chlat1.ads" 149 0 0#"model" "model_trace:7624" "name:HTS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "htj" defined at a-chlat1.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__htj
 use import "_gnatprove_standard".Main

 function htj #"a-chlat1.ads" 150 0 0#"model" "model_trace:7637" "name:HTJ" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "vts" defined at a-chlat1.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__vts
 use import "_gnatprove_standard".Main

 function vts #"a-chlat1.ads" 151 0 0#"model" "model_trace:7650" "name:VTS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pld" defined at a-chlat1.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pld
 use import "_gnatprove_standard".Main

 function pld #"a-chlat1.ads" 152 0 0#"model" "model_trace:7663" "name:PLD" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "plu" defined at a-chlat1.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__plu
 use import "_gnatprove_standard".Main

 function plu #"a-chlat1.ads" 153 0 0#"model" "model_trace:7676" "name:PLU" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ri" defined at a-chlat1.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ri
 use import "_gnatprove_standard".Main

 function ri #"a-chlat1.ads" 154 0 0#"model" "model_trace:7689" "name:RI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ss2" defined at a-chlat1.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ss2
 use import "_gnatprove_standard".Main

 function ss2 #"a-chlat1.ads" 155 0 0#"model" "model_trace:7702" "name:SS2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "ss3" defined at a-chlat1.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__ss3
 use import "_gnatprove_standard".Main

 function ss3 #"a-chlat1.ads" 156 0 0#"model" "model_trace:7715" "name:SS3" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "dcs" defined at a-chlat1.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__dcs
 use import "_gnatprove_standard".Main

 function dcs #"a-chlat1.ads" 158 0 0#"model" "model_trace:7728" "name:DCS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pu1" defined at a-chlat1.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pu1
 use import "_gnatprove_standard".Main

 function pu1 #"a-chlat1.ads" 159 0 0#"model" "model_trace:7741" "name:PU1" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pu2" defined at a-chlat1.ads:160, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pu2
 use import "_gnatprove_standard".Main

 function pu2 #"a-chlat1.ads" 160 0 0#"model" "model_trace:7754" "name:PU2" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sts" defined at a-chlat1.ads:161, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sts
 use import "_gnatprove_standard".Main

 function sts #"a-chlat1.ads" 161 0 0#"model" "model_trace:7767" "name:STS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cch" defined at a-chlat1.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cch
 use import "_gnatprove_standard".Main

 function cch #"a-chlat1.ads" 162 0 0#"model" "model_trace:7780" "name:CCH" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "mw" defined at a-chlat1.ads:163, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__mw
 use import "_gnatprove_standard".Main

 function mw #"a-chlat1.ads" 163 0 0#"model" "model_trace:7793" "name:MW" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "spa" defined at a-chlat1.ads:164, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__spa
 use import "_gnatprove_standard".Main

 function spa #"a-chlat1.ads" 164 0 0#"model" "model_trace:7806" "name:SPA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "epa" defined at a-chlat1.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__epa
 use import "_gnatprove_standard".Main

 function epa #"a-chlat1.ads" 165 0 0#"model" "model_trace:7819" "name:EPA" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sos" defined at a-chlat1.ads:167, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sos
 use import "_gnatprove_standard".Main

 function sos #"a-chlat1.ads" 167 0 0#"model" "model_trace:7832" "name:SOS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "reserved_153" defined at a-chlat1.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__reserved_153
 use import "_gnatprove_standard".Main

 function reserved_153 #"a-chlat1.ads" 168 0 0#"model" "model_trace:7845" "name:Reserved_153" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "sci" defined at a-chlat1.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__sci
 use import "_gnatprove_standard".Main

 function sci #"a-chlat1.ads" 169 0 0#"model" "model_trace:7858" "name:SCI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "csi" defined at a-chlat1.ads:170, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__csi
 use import "_gnatprove_standard".Main

 function csi #"a-chlat1.ads" 170 0 0#"model" "model_trace:7871" "name:CSI" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "st" defined at a-chlat1.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__st
 use import "_gnatprove_standard".Main

 function st #"a-chlat1.ads" 171 0 0#"model" "model_trace:7884" "name:ST" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "osc" defined at a-chlat1.ads:172, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__osc
 use import "_gnatprove_standard".Main

 function osc #"a-chlat1.ads" 172 0 0#"model" "model_trace:7897" "name:OSC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pm" defined at a-chlat1.ads:173, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pm
 use import "_gnatprove_standard".Main

 function pm #"a-chlat1.ads" 173 0 0#"model" "model_trace:7910" "name:PM" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "apc" defined at a-chlat1.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__apc
 use import "_gnatprove_standard".Main

 function apc #"a-chlat1.ads" 174 0 0#"model" "model_trace:7923" "name:APC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "no_break_space" defined at a-chlat1.ads:182, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__no_break_space
 use import "_gnatprove_standard".Main

 function no_break_space #"a-chlat1.ads" 182 0 0#"model" "model_trace:7936" "name:No_Break_Space" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "inverted_exclamation" defined at a-chlat1.ads:184, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__inverted_exclamation
 use import "_gnatprove_standard".Main

 function inverted_exclamation #"a-chlat1.ads" 184 0 0#"model" "model_trace:7959" "name:Inverted_Exclamation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cent_sign" defined at a-chlat1.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cent_sign
 use import "_gnatprove_standard".Main

 function cent_sign #"a-chlat1.ads" 185 0 0#"model" "model_trace:7972" "name:Cent_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pound_sign" defined at a-chlat1.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pound_sign
 use import "_gnatprove_standard".Main

 function pound_sign #"a-chlat1.ads" 186 0 0#"model" "model_trace:7985" "name:Pound_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "currency_sign" defined at a-chlat1.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__currency_sign
 use import "_gnatprove_standard".Main

 function currency_sign #"a-chlat1.ads" 187 0 0#"model" "model_trace:7998" "name:Currency_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "yen_sign" defined at a-chlat1.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__yen_sign
 use import "_gnatprove_standard".Main

 function yen_sign #"a-chlat1.ads" 188 0 0#"model" "model_trace:8011" "name:Yen_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "broken_bar" defined at a-chlat1.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__broken_bar
 use import "_gnatprove_standard".Main

 function broken_bar #"a-chlat1.ads" 189 0 0#"model" "model_trace:8024" "name:Broken_Bar" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "section_sign" defined at a-chlat1.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__section_sign
 use import "_gnatprove_standard".Main

 function section_sign #"a-chlat1.ads" 190 0 0#"model" "model_trace:8037" "name:Section_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "diaeresis" defined at a-chlat1.ads:191, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__diaeresis
 use import "_gnatprove_standard".Main

 function diaeresis #"a-chlat1.ads" 191 0 0#"model" "model_trace:8050" "name:Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "copyright_sign" defined at a-chlat1.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__copyright_sign
 use import "_gnatprove_standard".Main

 function copyright_sign #"a-chlat1.ads" 192 0 0#"model" "model_trace:8063" "name:Copyright_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "feminine_ordinal_indicator" defined at a-chlat1.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__feminine_ordinal_indicator
 use import "_gnatprove_standard".Main

 function feminine_ordinal_indicator #"a-chlat1.ads" 193 0 0#"model" "model_trace:8076" "name:Feminine_Ordinal_Indicator" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left_angle_quotation" defined at a-chlat1.ads:194, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__left_angle_quotation
 use import "_gnatprove_standard".Main

 function left_angle_quotation #"a-chlat1.ads" 194 0 0#"model" "model_trace:8089" "name:Left_Angle_Quotation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "not_sign" defined at a-chlat1.ads:195, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__not_sign
 use import "_gnatprove_standard".Main

 function not_sign #"a-chlat1.ads" 195 0 0#"model" "model_trace:8102" "name:Not_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "soft_hyphen" defined at a-chlat1.ads:196, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__soft_hyphen
 use import "_gnatprove_standard".Main

 function soft_hyphen #"a-chlat1.ads" 196 0 0#"model" "model_trace:8115" "name:Soft_Hyphen" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "registered_trade_mark_sign" defined at a-chlat1.ads:197, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__registered_trade_mark_sign
 use import "_gnatprove_standard".Main

 function registered_trade_mark_sign #"a-chlat1.ads" 197 0 0#"model" "model_trace:8128" "name:Registered_Trade_Mark_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "macron" defined at a-chlat1.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__macron
 use import "_gnatprove_standard".Main

 function macron #"a-chlat1.ads" 198 0 0#"model" "model_trace:8141" "name:Macron" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "degree_sign" defined at a-chlat1.ads:202, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__degree_sign
 use import "_gnatprove_standard".Main

 function degree_sign #"a-chlat1.ads" 202 0 0#"model" "model_trace:8154" "name:Degree_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "plus_minus_sign" defined at a-chlat1.ads:204, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__plus_minus_sign
 use import "_gnatprove_standard".Main

 function plus_minus_sign #"a-chlat1.ads" 204 0 0#"model" "model_trace:8177" "name:Plus_Minus_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "superscript_two" defined at a-chlat1.ads:205, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__superscript_two
 use import "_gnatprove_standard".Main

 function superscript_two #"a-chlat1.ads" 205 0 0#"model" "model_trace:8190" "name:Superscript_Two" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "superscript_three" defined at a-chlat1.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__superscript_three
 use import "_gnatprove_standard".Main

 function superscript_three #"a-chlat1.ads" 206 0 0#"model" "model_trace:8203" "name:Superscript_Three" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "acute" defined at a-chlat1.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__acute
 use import "_gnatprove_standard".Main

 function acute #"a-chlat1.ads" 207 0 0#"model" "model_trace:8216" "name:Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "micro_sign" defined at a-chlat1.ads:208, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__micro_sign
 use import "_gnatprove_standard".Main

 function micro_sign #"a-chlat1.ads" 208 0 0#"model" "model_trace:8229" "name:Micro_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "pilcrow_sign" defined at a-chlat1.ads:209, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__pilcrow_sign
 use import "_gnatprove_standard".Main

 function pilcrow_sign #"a-chlat1.ads" 209 0 0#"model" "model_trace:8242" "name:Pilcrow_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "middle_dot" defined at a-chlat1.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__middle_dot
 use import "_gnatprove_standard".Main

 function middle_dot #"a-chlat1.ads" 211 0 0#"model" "model_trace:8265" "name:Middle_Dot" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "cedilla" defined at a-chlat1.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__cedilla
 use import "_gnatprove_standard".Main

 function cedilla #"a-chlat1.ads" 212 0 0#"model" "model_trace:8278" "name:Cedilla" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "superscript_one" defined at a-chlat1.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__superscript_one
 use import "_gnatprove_standard".Main

 function superscript_one #"a-chlat1.ads" 213 0 0#"model" "model_trace:8291" "name:Superscript_One" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "masculine_ordinal_indicator" defined at a-chlat1.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__masculine_ordinal_indicator
 use import "_gnatprove_standard".Main

 function masculine_ordinal_indicator #"a-chlat1.ads" 214 0 0#"model" "model_trace:8304" "name:Masculine_Ordinal_Indicator" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "right_angle_quotation" defined at a-chlat1.ads:215, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__right_angle_quotation
 use import "_gnatprove_standard".Main

 function right_angle_quotation #"a-chlat1.ads" 215 0 0#"model" "model_trace:8317" "name:Right_Angle_Quotation" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fraction_one_quarter" defined at a-chlat1.ads:216, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fraction_one_quarter
 use import "_gnatprove_standard".Main

 function fraction_one_quarter #"a-chlat1.ads" 216 0 0#"model" "model_trace:8330" "name:Fraction_One_Quarter" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fraction_one_half" defined at a-chlat1.ads:217, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fraction_one_half
 use import "_gnatprove_standard".Main

 function fraction_one_half #"a-chlat1.ads" 217 0 0#"model" "model_trace:8343" "name:Fraction_One_Half" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fraction_three_quarters" defined at a-chlat1.ads:218, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__fraction_three_quarters
 use import "_gnatprove_standard".Main

 function fraction_three_quarters #"a-chlat1.ads" 218 0 0#"model" "model_trace:8356" "name:Fraction_Three_Quarters" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "inverted_question" defined at a-chlat1.ads:219, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__inverted_question
 use import "_gnatprove_standard".Main

 function inverted_question #"a-chlat1.ads" 219 0 0#"model" "model_trace:8369" "name:Inverted_Question" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_grave" defined at a-chlat1.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_grave
 use import "_gnatprove_standard".Main

 function uc_a_grave #"a-chlat1.ads" 223 0 0#"model" "model_trace:8382" "name:UC_A_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_acute" defined at a-chlat1.ads:224, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_acute
 use import "_gnatprove_standard".Main

 function uc_a_acute #"a-chlat1.ads" 224 0 0#"model" "model_trace:8395" "name:UC_A_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_circumflex" defined at a-chlat1.ads:225, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_circumflex
 use import "_gnatprove_standard".Main

 function uc_a_circumflex #"a-chlat1.ads" 225 0 0#"model" "model_trace:8408" "name:UC_A_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_tilde" defined at a-chlat1.ads:226, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_tilde
 use import "_gnatprove_standard".Main

 function uc_a_tilde #"a-chlat1.ads" 226 0 0#"model" "model_trace:8421" "name:UC_A_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_diaeresis" defined at a-chlat1.ads:227, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_diaeresis
 use import "_gnatprove_standard".Main

 function uc_a_diaeresis #"a-chlat1.ads" 227 0 0#"model" "model_trace:8434" "name:UC_A_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_a_ring" defined at a-chlat1.ads:228, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_a_ring
 use import "_gnatprove_standard".Main

 function uc_a_ring #"a-chlat1.ads" 228 0 0#"model" "model_trace:8447" "name:UC_A_Ring" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_ae_diphthong" defined at a-chlat1.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_ae_diphthong
 use import "_gnatprove_standard".Main

 function uc_ae_diphthong #"a-chlat1.ads" 229 0 0#"model" "model_trace:8460" "name:UC_AE_Diphthong" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_c_cedilla" defined at a-chlat1.ads:230, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_c_cedilla
 use import "_gnatprove_standard".Main

 function uc_c_cedilla #"a-chlat1.ads" 230 0 0#"model" "model_trace:8473" "name:UC_C_Cedilla" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_grave" defined at a-chlat1.ads:231, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_grave
 use import "_gnatprove_standard".Main

 function uc_e_grave #"a-chlat1.ads" 231 0 0#"model" "model_trace:8486" "name:UC_E_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_acute" defined at a-chlat1.ads:232, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_acute
 use import "_gnatprove_standard".Main

 function uc_e_acute #"a-chlat1.ads" 232 0 0#"model" "model_trace:8499" "name:UC_E_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_circumflex" defined at a-chlat1.ads:233, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_circumflex
 use import "_gnatprove_standard".Main

 function uc_e_circumflex #"a-chlat1.ads" 233 0 0#"model" "model_trace:8512" "name:UC_E_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_e_diaeresis" defined at a-chlat1.ads:234, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_e_diaeresis
 use import "_gnatprove_standard".Main

 function uc_e_diaeresis #"a-chlat1.ads" 234 0 0#"model" "model_trace:8525" "name:UC_E_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_grave" defined at a-chlat1.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_grave
 use import "_gnatprove_standard".Main

 function uc_i_grave #"a-chlat1.ads" 235 0 0#"model" "model_trace:8538" "name:UC_I_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_acute" defined at a-chlat1.ads:236, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_acute
 use import "_gnatprove_standard".Main

 function uc_i_acute #"a-chlat1.ads" 236 0 0#"model" "model_trace:8551" "name:UC_I_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_circumflex" defined at a-chlat1.ads:237, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_circumflex
 use import "_gnatprove_standard".Main

 function uc_i_circumflex #"a-chlat1.ads" 237 0 0#"model" "model_trace:8564" "name:UC_I_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_i_diaeresis" defined at a-chlat1.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_i_diaeresis
 use import "_gnatprove_standard".Main

 function uc_i_diaeresis #"a-chlat1.ads" 238 0 0#"model" "model_trace:8577" "name:UC_I_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_icelandic_eth" defined at a-chlat1.ads:242, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_icelandic_eth
 use import "_gnatprove_standard".Main

 function uc_icelandic_eth #"a-chlat1.ads" 242 0 0#"model" "model_trace:8590" "name:UC_Icelandic_Eth" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_n_tilde" defined at a-chlat1.ads:243, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_n_tilde
 use import "_gnatprove_standard".Main

 function uc_n_tilde #"a-chlat1.ads" 243 0 0#"model" "model_trace:8603" "name:UC_N_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_grave" defined at a-chlat1.ads:244, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_grave
 use import "_gnatprove_standard".Main

 function uc_o_grave #"a-chlat1.ads" 244 0 0#"model" "model_trace:8616" "name:UC_O_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_acute" defined at a-chlat1.ads:245, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_acute
 use import "_gnatprove_standard".Main

 function uc_o_acute #"a-chlat1.ads" 245 0 0#"model" "model_trace:8629" "name:UC_O_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_circumflex" defined at a-chlat1.ads:246, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_circumflex
 use import "_gnatprove_standard".Main

 function uc_o_circumflex #"a-chlat1.ads" 246 0 0#"model" "model_trace:8642" "name:UC_O_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_tilde" defined at a-chlat1.ads:247, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_tilde
 use import "_gnatprove_standard".Main

 function uc_o_tilde #"a-chlat1.ads" 247 0 0#"model" "model_trace:8655" "name:UC_O_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_diaeresis" defined at a-chlat1.ads:248, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_diaeresis
 use import "_gnatprove_standard".Main

 function uc_o_diaeresis #"a-chlat1.ads" 248 0 0#"model" "model_trace:8668" "name:UC_O_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "multiplication_sign" defined at a-chlat1.ads:249, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__multiplication_sign
 use import "_gnatprove_standard".Main

 function multiplication_sign #"a-chlat1.ads" 249 0 0#"model" "model_trace:8681" "name:Multiplication_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_o_oblique_stroke" defined at a-chlat1.ads:250, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_o_oblique_stroke
 use import "_gnatprove_standard".Main

 function uc_o_oblique_stroke #"a-chlat1.ads" 250 0 0#"model" "model_trace:8694" "name:UC_O_Oblique_Stroke" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_grave" defined at a-chlat1.ads:251, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_grave
 use import "_gnatprove_standard".Main

 function uc_u_grave #"a-chlat1.ads" 251 0 0#"model" "model_trace:8707" "name:UC_U_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_acute" defined at a-chlat1.ads:252, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_acute
 use import "_gnatprove_standard".Main

 function uc_u_acute #"a-chlat1.ads" 252 0 0#"model" "model_trace:8720" "name:UC_U_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_circumflex" defined at a-chlat1.ads:253, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_circumflex
 use import "_gnatprove_standard".Main

 function uc_u_circumflex #"a-chlat1.ads" 253 0 0#"model" "model_trace:8733" "name:UC_U_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_u_diaeresis" defined at a-chlat1.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_u_diaeresis
 use import "_gnatprove_standard".Main

 function uc_u_diaeresis #"a-chlat1.ads" 254 0 0#"model" "model_trace:8746" "name:UC_U_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_y_acute" defined at a-chlat1.ads:255, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_y_acute
 use import "_gnatprove_standard".Main

 function uc_y_acute #"a-chlat1.ads" 255 0 0#"model" "model_trace:8759" "name:UC_Y_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "uc_icelandic_thorn" defined at a-chlat1.ads:256, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__uc_icelandic_thorn
 use import "_gnatprove_standard".Main

 function uc_icelandic_thorn #"a-chlat1.ads" 256 0 0#"model" "model_trace:8772" "name:UC_Icelandic_Thorn" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_german_sharp_s" defined at a-chlat1.ads:257, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_german_sharp_s
 use import "_gnatprove_standard".Main

 function lc_german_sharp_s #"a-chlat1.ads" 257 0 0#"model" "model_trace:8785" "name:LC_German_Sharp_S" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_grave" defined at a-chlat1.ads:261, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_grave
 use import "_gnatprove_standard".Main

 function lc_a_grave #"a-chlat1.ads" 261 0 0#"model" "model_trace:8798" "name:LC_A_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_acute" defined at a-chlat1.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_acute
 use import "_gnatprove_standard".Main

 function lc_a_acute #"a-chlat1.ads" 262 0 0#"model" "model_trace:8811" "name:LC_A_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_circumflex" defined at a-chlat1.ads:263, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_circumflex
 use import "_gnatprove_standard".Main

 function lc_a_circumflex #"a-chlat1.ads" 263 0 0#"model" "model_trace:8824" "name:LC_A_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_tilde" defined at a-chlat1.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_tilde
 use import "_gnatprove_standard".Main

 function lc_a_tilde #"a-chlat1.ads" 264 0 0#"model" "model_trace:8837" "name:LC_A_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_diaeresis" defined at a-chlat1.ads:265, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_diaeresis
 use import "_gnatprove_standard".Main

 function lc_a_diaeresis #"a-chlat1.ads" 265 0 0#"model" "model_trace:8850" "name:LC_A_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_a_ring" defined at a-chlat1.ads:266, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_a_ring
 use import "_gnatprove_standard".Main

 function lc_a_ring #"a-chlat1.ads" 266 0 0#"model" "model_trace:8863" "name:LC_A_Ring" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_ae_diphthong" defined at a-chlat1.ads:267, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_ae_diphthong
 use import "_gnatprove_standard".Main

 function lc_ae_diphthong #"a-chlat1.ads" 267 0 0#"model" "model_trace:8876" "name:LC_AE_Diphthong" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_c_cedilla" defined at a-chlat1.ads:268, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_c_cedilla
 use import "_gnatprove_standard".Main

 function lc_c_cedilla #"a-chlat1.ads" 268 0 0#"model" "model_trace:8889" "name:LC_C_Cedilla" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_grave" defined at a-chlat1.ads:269, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_grave
 use import "_gnatprove_standard".Main

 function lc_e_grave #"a-chlat1.ads" 269 0 0#"model" "model_trace:8902" "name:LC_E_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_acute" defined at a-chlat1.ads:270, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_acute
 use import "_gnatprove_standard".Main

 function lc_e_acute #"a-chlat1.ads" 270 0 0#"model" "model_trace:8915" "name:LC_E_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_circumflex" defined at a-chlat1.ads:271, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_circumflex
 use import "_gnatprove_standard".Main

 function lc_e_circumflex #"a-chlat1.ads" 271 0 0#"model" "model_trace:8928" "name:LC_E_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_e_diaeresis" defined at a-chlat1.ads:272, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_e_diaeresis
 use import "_gnatprove_standard".Main

 function lc_e_diaeresis #"a-chlat1.ads" 272 0 0#"model" "model_trace:8941" "name:LC_E_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_grave" defined at a-chlat1.ads:273, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_grave
 use import "_gnatprove_standard".Main

 function lc_i_grave #"a-chlat1.ads" 273 0 0#"model" "model_trace:8954" "name:LC_I_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_acute" defined at a-chlat1.ads:274, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_acute
 use import "_gnatprove_standard".Main

 function lc_i_acute #"a-chlat1.ads" 274 0 0#"model" "model_trace:8967" "name:LC_I_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_circumflex" defined at a-chlat1.ads:275, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_circumflex
 use import "_gnatprove_standard".Main

 function lc_i_circumflex #"a-chlat1.ads" 275 0 0#"model" "model_trace:8980" "name:LC_I_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_i_diaeresis" defined at a-chlat1.ads:276, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_i_diaeresis
 use import "_gnatprove_standard".Main

 function lc_i_diaeresis #"a-chlat1.ads" 276 0 0#"model" "model_trace:8993" "name:LC_I_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_icelandic_eth" defined at a-chlat1.ads:279, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_icelandic_eth
 use import "_gnatprove_standard".Main

 function lc_icelandic_eth #"a-chlat1.ads" 279 0 0#"model" "model_trace:9006" "name:LC_Icelandic_Eth" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_n_tilde" defined at a-chlat1.ads:280, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_n_tilde
 use import "_gnatprove_standard".Main

 function lc_n_tilde #"a-chlat1.ads" 280 0 0#"model" "model_trace:9019" "name:LC_N_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_grave" defined at a-chlat1.ads:281, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_grave
 use import "_gnatprove_standard".Main

 function lc_o_grave #"a-chlat1.ads" 281 0 0#"model" "model_trace:9032" "name:LC_O_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_acute" defined at a-chlat1.ads:282, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_acute
 use import "_gnatprove_standard".Main

 function lc_o_acute #"a-chlat1.ads" 282 0 0#"model" "model_trace:9045" "name:LC_O_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_circumflex" defined at a-chlat1.ads:283, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_circumflex
 use import "_gnatprove_standard".Main

 function lc_o_circumflex #"a-chlat1.ads" 283 0 0#"model" "model_trace:9058" "name:LC_O_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_tilde" defined at a-chlat1.ads:284, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_tilde
 use import "_gnatprove_standard".Main

 function lc_o_tilde #"a-chlat1.ads" 284 0 0#"model" "model_trace:9071" "name:LC_O_Tilde" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_diaeresis" defined at a-chlat1.ads:285, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_diaeresis
 use import "_gnatprove_standard".Main

 function lc_o_diaeresis #"a-chlat1.ads" 285 0 0#"model" "model_trace:9084" "name:LC_O_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "division_sign" defined at a-chlat1.ads:286, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__division_sign
 use import "_gnatprove_standard".Main

 function division_sign #"a-chlat1.ads" 286 0 0#"model" "model_trace:9097" "name:Division_Sign" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_o_oblique_stroke" defined at a-chlat1.ads:287, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_o_oblique_stroke
 use import "_gnatprove_standard".Main

 function lc_o_oblique_stroke #"a-chlat1.ads" 287 0 0#"model" "model_trace:9110" "name:LC_O_Oblique_Stroke" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_grave" defined at a-chlat1.ads:288, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_grave
 use import "_gnatprove_standard".Main

 function lc_u_grave #"a-chlat1.ads" 288 0 0#"model" "model_trace:9123" "name:LC_U_Grave" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_acute" defined at a-chlat1.ads:289, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_acute
 use import "_gnatprove_standard".Main

 function lc_u_acute #"a-chlat1.ads" 289 0 0#"model" "model_trace:9136" "name:LC_U_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_circumflex" defined at a-chlat1.ads:290, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_circumflex
 use import "_gnatprove_standard".Main

 function lc_u_circumflex #"a-chlat1.ads" 290 0 0#"model" "model_trace:9149" "name:LC_U_Circumflex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_u_diaeresis" defined at a-chlat1.ads:291, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_u_diaeresis
 use import "_gnatprove_standard".Main

 function lc_u_diaeresis #"a-chlat1.ads" 291 0 0#"model" "model_trace:9162" "name:LC_U_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_y_acute" defined at a-chlat1.ads:292, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_y_acute
 use import "_gnatprove_standard".Main

 function lc_y_acute #"a-chlat1.ads" 292 0 0#"model" "model_trace:9175" "name:LC_Y_Acute" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_icelandic_thorn" defined at a-chlat1.ads:293, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_icelandic_thorn
 use import "_gnatprove_standard".Main

 function lc_icelandic_thorn #"a-chlat1.ads" 293 0 0#"model" "model_trace:9188" "name:LC_Icelandic_Thorn" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "lc_y_diaeresis" defined at a-chlat1.ads:294, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__characters__latin_1__lc_y_diaeresis
 use import "_gnatprove_standard".Main

 function lc_y_diaeresis #"a-chlat1.ads" 294 0 0#"model" "model_trace:9201" "name:LC_Y_Diaeresis" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "opcode" defined at instruction.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Instruction__opcode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type opcode 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = opcode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type opcode__ref =
  { mutable opcode__content "model_trace:" "name:" : opcode }
 
 function opcode__ref___projection 
   (a : opcode__ref) : opcode =
  a.opcode__content
 
 meta "model_projection" function opcode__ref___projection
 
 meta "inline : no" function opcode__ref___projection
 
 val opcode__havoc 
   (x : opcode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "opcode" defined at instruction.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Instruction__opcode__rep
 use        Instruction__opcode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__opcode.opcode, 
 predicate in_range = Instruction__opcode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "num_regs" defined at instruction.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__num_regs
 use import "_gnatprove_standard".Main

 function num_regs #"instruction.ads" 8 0 0#"model" "model_trace:3123" "name:NUM_REGS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "TregB" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TregB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tregB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tregB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tregB__ref =
  { mutable tregB__content "model_trace:" "name:" : tregB }
 
 function tregB__ref___projection 
   (a : tregB__ref) : tregB =
  a.tregB__content
 
 meta "model_projection" function tregB__ref___projection
 
 meta "inline : no" function tregB__ref___projection
 
 val tregB__havoc 
   (x : tregB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TregB" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TregB__rep
 use        Instruction__TregB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__TregB.tregB) : int =
  (Instruction__TregB.tregB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__TregB.tregB, 
 predicate in_range = Instruction__TregB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reg" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__reg
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reg =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reg, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reg__ref =
  { mutable reg__content "model_trace:" "name:" : reg }
 
 function reg__ref___projection 
   (a : reg__ref) : reg =
  a.reg__content
 
 meta "model_projection" function reg__ref___projection
 
 meta "inline : no" function reg__ref___projection
 
 val reg__havoc 
   (x : reg__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reg" defined at instruction.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Instruction__reg__rep
 use        Instruction__reg
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__reg.reg) : int =
  (Instruction__reg.reg'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__reg.reg, 
 predicate in_range = Instruction__reg.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "memory_size" defined at instruction.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__memory_size
 use import "_gnatprove_standard".Main

 function memory_size #"instruction.ads" 15 0 0#"model" "model_trace:3146" "name:MEMORY_SIZE" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "TaddrB" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TaddrB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type taddrB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = taddrB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type taddrB__ref =
  { mutable taddrB__content "model_trace:" "name:" : taddrB }
 
 function taddrB__ref___projection 
   (a : taddrB__ref) : taddrB =
  a.taddrB__content
 
 meta "model_projection" function taddrB__ref___projection
 
 meta "inline : no" function taddrB__ref___projection
 
 val taddrB__havoc 
   (x : taddrB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TaddrB" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__TaddrB__rep
 use        Instruction__TaddrB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__TaddrB.taddrB) : int =
  (Instruction__TaddrB.taddrB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__TaddrB.taddrB, 
 predicate in_range = Instruction__TaddrB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "addr" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__addr
 use import "_gnatprove_standard".Main
 use import "int".Int

 type addr =
  < range 0 65535 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = addr, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type addr__ref =
  { mutable addr__content "model_trace:" "name:" : addr }
 
 function addr__ref___projection 
   (a : addr__ref) : addr =
  a.addr__content
 
 meta "model_projection" function addr__ref___projection
 
 meta "inline : no" function addr__ref___projection
 
 val addr__havoc 
   (x : addr__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "addr" defined at instruction.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Instruction__addr__rep
 use        Instruction__addr
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__addr.addr) : int =
  (Instruction__addr.addr'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__addr.addr, 
 predicate in_range = Instruction__addr.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ToffsetB" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__ToffsetB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type toffsetB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = toffsetB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toffsetB__ref =
  { mutable toffsetB__content "model_trace:" "name:" : toffsetB }
 
 function toffsetB__ref___projection 
   (a : toffsetB__ref) : toffsetB =
  a.toffsetB__content
 
 meta "model_projection" function toffsetB__ref___projection
 
 meta "inline : no" function toffsetB__ref___projection
 
 val toffsetB__havoc 
   (x : toffsetB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ToffsetB" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__ToffsetB__rep
 use        Instruction__ToffsetB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__ToffsetB.toffsetB) : int =
  (Instruction__ToffsetB.toffsetB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__ToffsetB.toffsetB, 
 predicate in_range = Instruction__ToffsetB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "offset" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__offset
 use import "_gnatprove_standard".Main
 use import "int".Int

 type offset =
  < range -65535 65535 >
 
 function first 
   : int =
  ( -65535 )
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = offset, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type offset__ref =
  { mutable offset__content "model_trace:" "name:" : offset }
 
 function offset__ref___projection 
   (a : offset__ref) : offset =
  a.offset__content
 
 meta "model_projection" function offset__ref___projection
 
 meta "inline : no" function offset__ref___projection
 
 val offset__havoc 
   (x : offset__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "offset" defined at instruction.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Instruction__offset__rep
 use        Instruction__offset
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__offset.offset) : int =
  (Instruction__offset.offset'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__offset.offset, 
 predicate in_range = Instruction__offset.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "instr" defined at instruction.ads:25, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__instr__rep
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__reg
 use        Instruction__reg__rep
 use        Instruction__offset
 use        Instruction__offset__rep

 type __split_discrs =
  { rec__instruction__instr__op "model_trace:.3193" "name:Op" : Instruction__opcode.opcode }
 
 function __split_discrs___projection 
   (a : __split_discrs) : Instruction__opcode.opcode =
  a.rec__instruction__instr__op
 
 meta "model_projection" function __split_discrs___projection
 
 meta "inline : no" function __split_discrs___projection
 
 type __split_discrs__ref =
  { mutable __split_discrs__content "model_trace:" "name:" : __split_discrs }
 
 function __split_discrs__ref___projection 
   (a : __split_discrs__ref) : __split_discrs =
  a.__split_discrs__content
 
 meta "model_projection" function __split_discrs__ref___projection
 
 meta "inline : no" function __split_discrs__ref___projection
 
 val __split_discrs__havoc 
   (x : __split_discrs__ref) : unit
  writes {x}
 
 type __split_fields =
  { rec__instruction__instr__addrd "model_trace:.3214" "name:AddRd" : Instruction__reg.reg; rec__instruction__instr__addrs1 "model_trace:.3224" "name:AddRs1" : Instruction__reg.reg; rec__instruction__instr__addrs2 "model_trace:.3234" "name:AddRs2" : Instruction__reg.reg; rec__instruction__instr__subrd "model_trace:.3248" "name:SubRd" : Instruction__reg.reg; rec__instruction__instr__subrs1 "model_trace:.3258" "name:SubRs1" : Instruction__reg.reg; rec__instruction__instr__subrs2 "model_trace:.3268" "name:SubRs2" : Instruction__reg.reg; rec__instruction__instr__mulrd "model_trace:.3282" "name:MulRd" : Instruction__reg.reg; rec__instruction__instr__mulrs1 "model_trace:.3292" "name:MulRs1" : Instruction__reg.reg; rec__instruction__instr__mulrs2 "model_trace:.3302" "name:MulRs2" : Instruction__reg.reg; rec__instruction__instr__divrd "model_trace:.3316" "name:DivRd" : Instruction__reg.reg; rec__instruction__instr__divrs1 "model_trace:.3326" "name:DivRs1" : Instruction__reg.reg; rec__instruction__instr__divrs2 "model_trace:.3336" "name:DivRs2" : Instruction__reg.reg; rec__instruction__instr__retrs "model_trace:.3350" "name:RetRs" : Instruction__reg.reg; rec__instruction__instr__ldrrd "model_trace:.3364" "name:LdrRd" : Instruction__reg.reg; rec__instruction__instr__ldrrs "model_trace:.3374" "name:LdrRs" : Instruction__reg.reg; rec__instruction__instr__ldroffs "model_trace:.3384" "name:LdrOffs" : Instruction__offset.offset; rec__instruction__instr__strra "model_trace:.3398" "name:StrRa" : Instruction__reg.reg; rec__instruction__instr__stroffs "model_trace:.3408" "name:StrOffs" : Instruction__offset.offset; rec__instruction__instr__strrb "model_trace:.3418" "name:StrRb" : Instruction__reg.reg; rec__instruction__instr__movrd "model_trace:.3432" "name:MovRd" : Instruction__reg.reg; rec__instruction__instr__movoffs "model_trace:.3442" "name:MovOffs" : Instruction__offset.offset; rec__instruction__instr__jmpoffs "model_trace:.3456" "name:JmpOffs" : Instruction__offset.offset; rec__instruction__instr__jzra "model_trace:.3470" "name:JzRa" : Instruction__reg.reg; rec__instruction__instr__jzoffs "model_trace:.3480" "name:JzOffs" : Instruction__offset.offset }
 
 function __split_fields_AddRd__projection "model_trace:.3214" "name:AddRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__addrd
 
 meta "model_projection" function __split_fields_AddRd__projection
 
 meta "inline : no" function __split_fields_AddRd__projection
 
 function __split_fields_AddRs1__projection "model_trace:.3224" "name:AddRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__addrs1
 
 meta "model_projection" function __split_fields_AddRs1__projection
 
 meta "inline : no" function __split_fields_AddRs1__projection
 
 function __split_fields_AddRs2__projection "model_trace:.3234" "name:AddRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__addrs2
 
 meta "model_projection" function __split_fields_AddRs2__projection
 
 meta "inline : no" function __split_fields_AddRs2__projection
 
 function __split_fields_SubRd__projection "model_trace:.3248" "name:SubRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__subrd
 
 meta "model_projection" function __split_fields_SubRd__projection
 
 meta "inline : no" function __split_fields_SubRd__projection
 
 function __split_fields_SubRs1__projection "model_trace:.3258" "name:SubRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__subrs1
 
 meta "model_projection" function __split_fields_SubRs1__projection
 
 meta "inline : no" function __split_fields_SubRs1__projection
 
 function __split_fields_SubRs2__projection "model_trace:.3268" "name:SubRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__subrs2
 
 meta "model_projection" function __split_fields_SubRs2__projection
 
 meta "inline : no" function __split_fields_SubRs2__projection
 
 function __split_fields_MulRd__projection "model_trace:.3282" "name:MulRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__mulrd
 
 meta "model_projection" function __split_fields_MulRd__projection
 
 meta "inline : no" function __split_fields_MulRd__projection
 
 function __split_fields_MulRs1__projection "model_trace:.3292" "name:MulRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__mulrs1
 
 meta "model_projection" function __split_fields_MulRs1__projection
 
 meta "inline : no" function __split_fields_MulRs1__projection
 
 function __split_fields_MulRs2__projection "model_trace:.3302" "name:MulRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__mulrs2
 
 meta "model_projection" function __split_fields_MulRs2__projection
 
 meta "inline : no" function __split_fields_MulRs2__projection
 
 function __split_fields_DivRd__projection "model_trace:.3316" "name:DivRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__divrd
 
 meta "model_projection" function __split_fields_DivRd__projection
 
 meta "inline : no" function __split_fields_DivRd__projection
 
 function __split_fields_DivRs1__projection "model_trace:.3326" "name:DivRs1" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__divrs1
 
 meta "model_projection" function __split_fields_DivRs1__projection
 
 meta "inline : no" function __split_fields_DivRs1__projection
 
 function __split_fields_DivRs2__projection "model_trace:.3336" "name:DivRs2" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__divrs2
 
 meta "model_projection" function __split_fields_DivRs2__projection
 
 meta "inline : no" function __split_fields_DivRs2__projection
 
 function __split_fields_RetRs__projection "model_trace:.3350" "name:RetRs" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__retrs
 
 meta "model_projection" function __split_fields_RetRs__projection
 
 meta "inline : no" function __split_fields_RetRs__projection
 
 function __split_fields_LdrRd__projection "model_trace:.3364" "name:LdrRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__ldrrd
 
 meta "model_projection" function __split_fields_LdrRd__projection
 
 meta "inline : no" function __split_fields_LdrRd__projection
 
 function __split_fields_LdrRs__projection "model_trace:.3374" "name:LdrRs" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__ldrrs
 
 meta "model_projection" function __split_fields_LdrRs__projection
 
 meta "inline : no" function __split_fields_LdrRs__projection
 
 function __split_fields_LdrOffs__projection "model_trace:.3384" "name:LdrOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__ldroffs
 
 meta "model_projection" function __split_fields_LdrOffs__projection
 
 meta "inline : no" function __split_fields_LdrOffs__projection
 
 function __split_fields_StrRa__projection "model_trace:.3398" "name:StrRa" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__strra
 
 meta "model_projection" function __split_fields_StrRa__projection
 
 meta "inline : no" function __split_fields_StrRa__projection
 
 function __split_fields_StrOffs__projection "model_trace:.3408" "name:StrOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__stroffs
 
 meta "model_projection" function __split_fields_StrOffs__projection
 
 meta "inline : no" function __split_fields_StrOffs__projection
 
 function __split_fields_StrRb__projection "model_trace:.3418" "name:StrRb" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__strrb
 
 meta "model_projection" function __split_fields_StrRb__projection
 
 meta "inline : no" function __split_fields_StrRb__projection
 
 function __split_fields_MovRd__projection "model_trace:.3432" "name:MovRd" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__movrd
 
 meta "model_projection" function __split_fields_MovRd__projection
 
 meta "inline : no" function __split_fields_MovRd__projection
 
 function __split_fields_MovOffs__projection "model_trace:.3442" "name:MovOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__movoffs
 
 meta "model_projection" function __split_fields_MovOffs__projection
 
 meta "inline : no" function __split_fields_MovOffs__projection
 
 function __split_fields_JmpOffs__projection "model_trace:.3456" "name:JmpOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__jmpoffs
 
 meta "model_projection" function __split_fields_JmpOffs__projection
 
 meta "inline : no" function __split_fields_JmpOffs__projection
 
 function __split_fields_JzRa__projection "model_trace:.3470" "name:JzRa" 
   (a : __split_fields) : Instruction__reg.reg =
  a.rec__instruction__instr__jzra
 
 meta "model_projection" function __split_fields_JzRa__projection
 
 meta "inline : no" function __split_fields_JzRa__projection
 
 function __split_fields_JzOffs__projection "model_trace:.3480" "name:JzOffs" 
   (a : __split_fields) : Instruction__offset.offset =
  a.rec__instruction__instr__jzoffs
 
 meta "model_projection" function __split_fields_JzOffs__projection
 
 meta "inline : no" function __split_fields_JzOffs__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_discrs "model_trace:" "name:" : __split_discrs; __split_fields "model_trace:" "name:" : __split_fields; attr__constrained "model_trace:" "name:" : bool }
 
 function __rep___projection 
   (a : __rep) : __split_discrs =
  a.__split_discrs
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function __rep___3__projection 
   (a : __rep) : bool =
  a.attr__constrained
 
 meta "model_projection" function __rep___3__projection
 
 meta "inline : no" function __rep___3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 val rec__instruction__instr__op_ 
   (a : __rep) : Instruction__opcode.opcode
  requires {  true }
  ensures {  (result = a.__split_discrs.rec__instruction__instr__op) }
 
 predicate instruction__instr__addrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 1)
 
 val rec__instruction__instr__addrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__addrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__addrd) }
 
 predicate instruction__instr__addrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 1)
 
 val rec__instruction__instr__addrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__addrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__addrs1) }
 
 predicate instruction__instr__addrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 1)
 
 val rec__instruction__instr__addrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__addrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__addrs2) }
 
 predicate instruction__instr__subrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 2)
 
 val rec__instruction__instr__subrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__subrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__subrd) }
 
 predicate instruction__instr__subrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 2)
 
 val rec__instruction__instr__subrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__subrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__subrs1) }
 
 predicate instruction__instr__subrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 2)
 
 val rec__instruction__instr__subrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__subrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__subrs2) }
 
 predicate instruction__instr__mulrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 3)
 
 val rec__instruction__instr__mulrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__mulrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__mulrd) }
 
 predicate instruction__instr__mulrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 3)
 
 val rec__instruction__instr__mulrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__mulrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__mulrs1) }
 
 predicate instruction__instr__mulrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 3)
 
 val rec__instruction__instr__mulrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__mulrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__mulrs2) }
 
 predicate instruction__instr__divrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 4)
 
 val rec__instruction__instr__divrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__divrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__divrd) }
 
 predicate instruction__instr__divrs1__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 4)
 
 val rec__instruction__instr__divrs1_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__divrs1__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__divrs1) }
 
 predicate instruction__instr__divrs2__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 4)
 
 val rec__instruction__instr__divrs2_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__divrs2__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__divrs2) }
 
 predicate instruction__instr__retrs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 5)
 
 val rec__instruction__instr__retrs_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__retrs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__retrs) }
 
 predicate instruction__instr__ldrrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 6)
 
 val rec__instruction__instr__ldrrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__ldrrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__ldrrd) }
 
 predicate instruction__instr__ldrrs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 6)
 
 val rec__instruction__instr__ldrrs_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__ldrrs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__ldrrs) }
 
 predicate instruction__instr__ldroffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 6)
 
 val rec__instruction__instr__ldroffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__ldroffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__ldroffs) }
 
 predicate instruction__instr__strra__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 7)
 
 val rec__instruction__instr__strra_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__strra__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__strra) }
 
 predicate instruction__instr__stroffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 7)
 
 val rec__instruction__instr__stroffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__stroffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__stroffs) }
 
 predicate instruction__instr__strrb__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 7)
 
 val rec__instruction__instr__strrb_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__strrb__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__strrb) }
 
 predicate instruction__instr__movrd__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 8)
 
 val rec__instruction__instr__movrd_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__movrd__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__movrd) }
 
 predicate instruction__instr__movoffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 8)
 
 val rec__instruction__instr__movoffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__movoffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__movoffs) }
 
 predicate instruction__instr__jmpoffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 9)
 
 val rec__instruction__instr__jmpoffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__jmpoffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__jmpoffs) }
 
 predicate instruction__instr__jzra__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 10)
 
 val rec__instruction__instr__jzra_ 
   (a : __rep) : Instruction__reg.reg
  requires {  (instruction__instr__jzra__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__jzra) }
 
 predicate instruction__instr__jzoffs__pred 
   (a : __rep)  =
  ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = 10)
 
 val rec__instruction__instr__jzoffs_ 
   (a : __rep) : Instruction__offset.offset
  requires {  (instruction__instr__jzoffs__pred a) }
  ensures {  (result = a.__split_fields.rec__instruction__instr__jzoffs) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Instruction__opcode__rep.to_rep a.__split_discrs.rec__instruction__instr__op) = (Instruction__opcode__rep.to_rep b.__split_discrs.rec__instruction__instr__op)) /\ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (instruction__instr__addrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__addrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__addrd)) ) /\ ( (instruction__instr__addrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__addrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__addrs1)) ) ) /\ ( (instruction__instr__addrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__addrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__addrs2)) ) ) /\ ( (instruction__instr__subrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__subrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__subrd)) ) ) /\ ( (instruction__instr__subrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__subrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__subrs1)) ) ) /\ ( (instruction__instr__subrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__subrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__subrs2)) ) ) /\ ( (instruction__instr__mulrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__mulrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__mulrd)) ) ) /\ ( (instruction__instr__mulrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__mulrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__mulrs1)) ) ) /\ ( (instruction__instr__mulrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__mulrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__mulrs2)) ) ) /\ ( (instruction__instr__divrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__divrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__divrd)) ) ) /\ ( (instruction__instr__divrs1__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__divrs1) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__divrs1)) ) ) /\ ( (instruction__instr__divrs2__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__divrs2) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__divrs2)) ) ) /\ ( (instruction__instr__retrs__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__retrs) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__retrs)) ) ) /\ ( (instruction__instr__ldrrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__ldrrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__ldrrd)) ) ) /\ ( (instruction__instr__ldrrs__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__ldrrs) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__ldrrs)) ) ) /\ ( (instruction__instr__ldroffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__ldroffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__ldroffs)) ) ) /\ ( (instruction__instr__strra__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__strra) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__strra)) ) ) /\ ( (instruction__instr__stroffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__stroffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__stroffs)) ) ) /\ ( (instruction__instr__strrb__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__strrb) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__strrb)) ) ) /\ ( (instruction__instr__movrd__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__movrd) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__movrd)) ) ) /\ ( (instruction__instr__movoffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__movoffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__movoffs)) ) ) /\ ( (instruction__instr__jmpoffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__jmpoffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__jmpoffs)) ) ) /\ ( (instruction__instr__jzra__pred a) -> ((Instruction__reg__rep.to_rep a.__split_fields.rec__instruction__instr__jzra) = (Instruction__reg__rep.to_rep b.__split_fields.rec__instruction__instr__jzra)) ) ) /\ ( (instruction__instr__jzoffs__pred a) -> ((Instruction__offset__rep.to_rep a.__split_fields.rec__instruction__instr__jzoffs) = (Instruction__offset__rep.to_rep b.__split_fields.rec__instruction__instr__jzoffs)) ) ) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "instr" defined at instruction.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Instruction__instr
 use export Instruction__instr__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type instr =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : instr) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : instr) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : instr.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : instr.
   ((object__alignment a) >= 0))
 
 function instruction__instr__op__first__bit 
   : int
 
 function instruction__instr__op__last__bit 
   : int
 
 function instruction__instr__op__position 
   : int
 
 axiom instruction__instr__op__first__bit_axiom :
  ((instruction__instr__op__first__bit ) >= 0)
 
 axiom instruction__instr__op__last__bit_axiom :
  ((instruction__instr__op__last__bit ) > (instruction__instr__op__first__bit ))
 
 axiom instruction__instr__op__position_axiom :
  ((instruction__instr__op__position ) >= 0)
 
 function instruction__instr__addrd__first__bit 
   : int
 
 function instruction__instr__addrd__last__bit 
   : int
 
 function instruction__instr__addrd__position 
   : int
 
 axiom instruction__instr__addrd__first__bit_axiom :
  ((instruction__instr__addrd__first__bit ) >= 0)
 
 axiom instruction__instr__addrd__last__bit_axiom :
  ((instruction__instr__addrd__last__bit ) > (instruction__instr__addrd__first__bit ))
 
 axiom instruction__instr__addrd__position_axiom :
  ((instruction__instr__addrd__position ) >= 0)
 
 function instruction__instr__addrs1__first__bit 
   : int
 
 function instruction__instr__addrs1__last__bit 
   : int
 
 function instruction__instr__addrs1__position 
   : int
 
 axiom instruction__instr__addrs1__first__bit_axiom :
  ((instruction__instr__addrs1__first__bit ) >= 0)
 
 axiom instruction__instr__addrs1__last__bit_axiom :
  ((instruction__instr__addrs1__last__bit ) > (instruction__instr__addrs1__first__bit ))
 
 axiom instruction__instr__addrs1__position_axiom :
  ((instruction__instr__addrs1__position ) >= 0)
 
 function instruction__instr__addrs2__first__bit 
   : int
 
 function instruction__instr__addrs2__last__bit 
   : int
 
 function instruction__instr__addrs2__position 
   : int
 
 axiom instruction__instr__addrs2__first__bit_axiom :
  ((instruction__instr__addrs2__first__bit ) >= 0)
 
 axiom instruction__instr__addrs2__last__bit_axiom :
  ((instruction__instr__addrs2__last__bit ) > (instruction__instr__addrs2__first__bit ))
 
 axiom instruction__instr__addrs2__position_axiom :
  ((instruction__instr__addrs2__position ) >= 0)
 
 function instruction__instr__subrd__first__bit 
   : int
 
 function instruction__instr__subrd__last__bit 
   : int
 
 function instruction__instr__subrd__position 
   : int
 
 axiom instruction__instr__subrd__first__bit_axiom :
  ((instruction__instr__subrd__first__bit ) >= 0)
 
 axiom instruction__instr__subrd__last__bit_axiom :
  ((instruction__instr__subrd__last__bit ) > (instruction__instr__subrd__first__bit ))
 
 axiom instruction__instr__subrd__position_axiom :
  ((instruction__instr__subrd__position ) >= 0)
 
 function instruction__instr__subrs1__first__bit 
   : int
 
 function instruction__instr__subrs1__last__bit 
   : int
 
 function instruction__instr__subrs1__position 
   : int
 
 axiom instruction__instr__subrs1__first__bit_axiom :
  ((instruction__instr__subrs1__first__bit ) >= 0)
 
 axiom instruction__instr__subrs1__last__bit_axiom :
  ((instruction__instr__subrs1__last__bit ) > (instruction__instr__subrs1__first__bit ))
 
 axiom instruction__instr__subrs1__position_axiom :
  ((instruction__instr__subrs1__position ) >= 0)
 
 function instruction__instr__subrs2__first__bit 
   : int
 
 function instruction__instr__subrs2__last__bit 
   : int
 
 function instruction__instr__subrs2__position 
   : int
 
 axiom instruction__instr__subrs2__first__bit_axiom :
  ((instruction__instr__subrs2__first__bit ) >= 0)
 
 axiom instruction__instr__subrs2__last__bit_axiom :
  ((instruction__instr__subrs2__last__bit ) > (instruction__instr__subrs2__first__bit ))
 
 axiom instruction__instr__subrs2__position_axiom :
  ((instruction__instr__subrs2__position ) >= 0)
 
 function instruction__instr__mulrd__first__bit 
   : int
 
 function instruction__instr__mulrd__last__bit 
   : int
 
 function instruction__instr__mulrd__position 
   : int
 
 axiom instruction__instr__mulrd__first__bit_axiom :
  ((instruction__instr__mulrd__first__bit ) >= 0)
 
 axiom instruction__instr__mulrd__last__bit_axiom :
  ((instruction__instr__mulrd__last__bit ) > (instruction__instr__mulrd__first__bit ))
 
 axiom instruction__instr__mulrd__position_axiom :
  ((instruction__instr__mulrd__position ) >= 0)
 
 function instruction__instr__mulrs1__first__bit 
   : int
 
 function instruction__instr__mulrs1__last__bit 
   : int
 
 function instruction__instr__mulrs1__position 
   : int
 
 axiom instruction__instr__mulrs1__first__bit_axiom :
  ((instruction__instr__mulrs1__first__bit ) >= 0)
 
 axiom instruction__instr__mulrs1__last__bit_axiom :
  ((instruction__instr__mulrs1__last__bit ) > (instruction__instr__mulrs1__first__bit ))
 
 axiom instruction__instr__mulrs1__position_axiom :
  ((instruction__instr__mulrs1__position ) >= 0)
 
 function instruction__instr__mulrs2__first__bit 
   : int
 
 function instruction__instr__mulrs2__last__bit 
   : int
 
 function instruction__instr__mulrs2__position 
   : int
 
 axiom instruction__instr__mulrs2__first__bit_axiom :
  ((instruction__instr__mulrs2__first__bit ) >= 0)
 
 axiom instruction__instr__mulrs2__last__bit_axiom :
  ((instruction__instr__mulrs2__last__bit ) > (instruction__instr__mulrs2__first__bit ))
 
 axiom instruction__instr__mulrs2__position_axiom :
  ((instruction__instr__mulrs2__position ) >= 0)
 
 function instruction__instr__divrd__first__bit 
   : int
 
 function instruction__instr__divrd__last__bit 
   : int
 
 function instruction__instr__divrd__position 
   : int
 
 axiom instruction__instr__divrd__first__bit_axiom :
  ((instruction__instr__divrd__first__bit ) >= 0)
 
 axiom instruction__instr__divrd__last__bit_axiom :
  ((instruction__instr__divrd__last__bit ) > (instruction__instr__divrd__first__bit ))
 
 axiom instruction__instr__divrd__position_axiom :
  ((instruction__instr__divrd__position ) >= 0)
 
 function instruction__instr__divrs1__first__bit 
   : int
 
 function instruction__instr__divrs1__last__bit 
   : int
 
 function instruction__instr__divrs1__position 
   : int
 
 axiom instruction__instr__divrs1__first__bit_axiom :
  ((instruction__instr__divrs1__first__bit ) >= 0)
 
 axiom instruction__instr__divrs1__last__bit_axiom :
  ((instruction__instr__divrs1__last__bit ) > (instruction__instr__divrs1__first__bit ))
 
 axiom instruction__instr__divrs1__position_axiom :
  ((instruction__instr__divrs1__position ) >= 0)
 
 function instruction__instr__divrs2__first__bit 
   : int
 
 function instruction__instr__divrs2__last__bit 
   : int
 
 function instruction__instr__divrs2__position 
   : int
 
 axiom instruction__instr__divrs2__first__bit_axiom :
  ((instruction__instr__divrs2__first__bit ) >= 0)
 
 axiom instruction__instr__divrs2__last__bit_axiom :
  ((instruction__instr__divrs2__last__bit ) > (instruction__instr__divrs2__first__bit ))
 
 axiom instruction__instr__divrs2__position_axiom :
  ((instruction__instr__divrs2__position ) >= 0)
 
 function instruction__instr__retrs__first__bit 
   : int
 
 function instruction__instr__retrs__last__bit 
   : int
 
 function instruction__instr__retrs__position 
   : int
 
 axiom instruction__instr__retrs__first__bit_axiom :
  ((instruction__instr__retrs__first__bit ) >= 0)
 
 axiom instruction__instr__retrs__last__bit_axiom :
  ((instruction__instr__retrs__last__bit ) > (instruction__instr__retrs__first__bit ))
 
 axiom instruction__instr__retrs__position_axiom :
  ((instruction__instr__retrs__position ) >= 0)
 
 function instruction__instr__ldrrd__first__bit 
   : int
 
 function instruction__instr__ldrrd__last__bit 
   : int
 
 function instruction__instr__ldrrd__position 
   : int
 
 axiom instruction__instr__ldrrd__first__bit_axiom :
  ((instruction__instr__ldrrd__first__bit ) >= 0)
 
 axiom instruction__instr__ldrrd__last__bit_axiom :
  ((instruction__instr__ldrrd__last__bit ) > (instruction__instr__ldrrd__first__bit ))
 
 axiom instruction__instr__ldrrd__position_axiom :
  ((instruction__instr__ldrrd__position ) >= 0)
 
 function instruction__instr__ldrrs__first__bit 
   : int
 
 function instruction__instr__ldrrs__last__bit 
   : int
 
 function instruction__instr__ldrrs__position 
   : int
 
 axiom instruction__instr__ldrrs__first__bit_axiom :
  ((instruction__instr__ldrrs__first__bit ) >= 0)
 
 axiom instruction__instr__ldrrs__last__bit_axiom :
  ((instruction__instr__ldrrs__last__bit ) > (instruction__instr__ldrrs__first__bit ))
 
 axiom instruction__instr__ldrrs__position_axiom :
  ((instruction__instr__ldrrs__position ) >= 0)
 
 function instruction__instr__ldroffs__first__bit 
   : int
 
 function instruction__instr__ldroffs__last__bit 
   : int
 
 function instruction__instr__ldroffs__position 
   : int
 
 axiom instruction__instr__ldroffs__first__bit_axiom :
  ((instruction__instr__ldroffs__first__bit ) >= 0)
 
 axiom instruction__instr__ldroffs__last__bit_axiom :
  ((instruction__instr__ldroffs__last__bit ) > (instruction__instr__ldroffs__first__bit ))
 
 axiom instruction__instr__ldroffs__position_axiom :
  ((instruction__instr__ldroffs__position ) >= 0)
 
 function instruction__instr__strra__first__bit 
   : int
 
 function instruction__instr__strra__last__bit 
   : int
 
 function instruction__instr__strra__position 
   : int
 
 axiom instruction__instr__strra__first__bit_axiom :
  ((instruction__instr__strra__first__bit ) >= 0)
 
 axiom instruction__instr__strra__last__bit_axiom :
  ((instruction__instr__strra__last__bit ) > (instruction__instr__strra__first__bit ))
 
 axiom instruction__instr__strra__position_axiom :
  ((instruction__instr__strra__position ) >= 0)
 
 function instruction__instr__stroffs__first__bit 
   : int
 
 function instruction__instr__stroffs__last__bit 
   : int
 
 function instruction__instr__stroffs__position 
   : int
 
 axiom instruction__instr__stroffs__first__bit_axiom :
  ((instruction__instr__stroffs__first__bit ) >= 0)
 
 axiom instruction__instr__stroffs__last__bit_axiom :
  ((instruction__instr__stroffs__last__bit ) > (instruction__instr__stroffs__first__bit ))
 
 axiom instruction__instr__stroffs__position_axiom :
  ((instruction__instr__stroffs__position ) >= 0)
 
 function instruction__instr__strrb__first__bit 
   : int
 
 function instruction__instr__strrb__last__bit 
   : int
 
 function instruction__instr__strrb__position 
   : int
 
 axiom instruction__instr__strrb__first__bit_axiom :
  ((instruction__instr__strrb__first__bit ) >= 0)
 
 axiom instruction__instr__strrb__last__bit_axiom :
  ((instruction__instr__strrb__last__bit ) > (instruction__instr__strrb__first__bit ))
 
 axiom instruction__instr__strrb__position_axiom :
  ((instruction__instr__strrb__position ) >= 0)
 
 function instruction__instr__movrd__first__bit 
   : int
 
 function instruction__instr__movrd__last__bit 
   : int
 
 function instruction__instr__movrd__position 
   : int
 
 axiom instruction__instr__movrd__first__bit_axiom :
  ((instruction__instr__movrd__first__bit ) >= 0)
 
 axiom instruction__instr__movrd__last__bit_axiom :
  ((instruction__instr__movrd__last__bit ) > (instruction__instr__movrd__first__bit ))
 
 axiom instruction__instr__movrd__position_axiom :
  ((instruction__instr__movrd__position ) >= 0)
 
 function instruction__instr__movoffs__first__bit 
   : int
 
 function instruction__instr__movoffs__last__bit 
   : int
 
 function instruction__instr__movoffs__position 
   : int
 
 axiom instruction__instr__movoffs__first__bit_axiom :
  ((instruction__instr__movoffs__first__bit ) >= 0)
 
 axiom instruction__instr__movoffs__last__bit_axiom :
  ((instruction__instr__movoffs__last__bit ) > (instruction__instr__movoffs__first__bit ))
 
 axiom instruction__instr__movoffs__position_axiom :
  ((instruction__instr__movoffs__position ) >= 0)
 
 function instruction__instr__jmpoffs__first__bit 
   : int
 
 function instruction__instr__jmpoffs__last__bit 
   : int
 
 function instruction__instr__jmpoffs__position 
   : int
 
 axiom instruction__instr__jmpoffs__first__bit_axiom :
  ((instruction__instr__jmpoffs__first__bit ) >= 0)
 
 axiom instruction__instr__jmpoffs__last__bit_axiom :
  ((instruction__instr__jmpoffs__last__bit ) > (instruction__instr__jmpoffs__first__bit ))
 
 axiom instruction__instr__jmpoffs__position_axiom :
  ((instruction__instr__jmpoffs__position ) >= 0)
 
 function instruction__instr__jzra__first__bit 
   : int
 
 function instruction__instr__jzra__last__bit 
   : int
 
 function instruction__instr__jzra__position 
   : int
 
 axiom instruction__instr__jzra__first__bit_axiom :
  ((instruction__instr__jzra__first__bit ) >= 0)
 
 axiom instruction__instr__jzra__last__bit_axiom :
  ((instruction__instr__jzra__last__bit ) > (instruction__instr__jzra__first__bit ))
 
 axiom instruction__instr__jzra__position_axiom :
  ((instruction__instr__jzra__position ) >= 0)
 
 function instruction__instr__jzoffs__first__bit 
   : int
 
 function instruction__instr__jzoffs__last__bit 
   : int
 
 function instruction__instr__jzoffs__position 
   : int
 
 axiom instruction__instr__jzoffs__first__bit_axiom :
  ((instruction__instr__jzoffs__first__bit ) >= 0)
 
 axiom instruction__instr__jzoffs__last__bit_axiom :
  ((instruction__instr__jzoffs__last__bit ) > (instruction__instr__jzoffs__first__bit ))
 
 axiom instruction__instr__jzoffs__position_axiom :
  ((instruction__instr__jzoffs__position ) >= 0)
 
 function user_eq 
   (a : instr) (b : instr) : bool
 
 function dummy 
   : instr
 
 type instr__ref =
  { mutable instr__content "model_trace:" "name:" : instr }
 
 function instr__ref___projection 
   (a : instr__ref) : instr =
  a.instr__content
 
 meta "model_projection" function instr__ref___projection
 
 meta "inline : no" function instr__ref___projection
 
 val instr__havoc 
   (x : instr__ref) : unit
  writes {x}

end

(* Module for defining the constant "inst" defined at instruction.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__debugprintinstr__inst
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 function inst #"instruction.ads" 78 0 0#"model_projected" "name:Inst" "model_trace:3539" 
   : Instruction__instr.instr
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inst" defined at instruction.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__debugprintinstr__inst___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_seed" defined at s-ransee.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__random_seed__get_seed
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function get_seed 
   (__void_param : unit) : BV64.t
 
 predicate get_seed__function_guard 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for axiomatizing type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_opcode__result_subtype
 use import "_gnatprove_standard".Main
 use import "int".Int

 type result_subtype 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  10
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = result_subtype, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type result_subtype__ref =
  { mutable result_subtype__content "model_trace:" "name:" : result_subtype }
 
 function result_subtype__ref___projection 
   (a : result_subtype__ref) : result_subtype =
  a.result_subtype__content
 
 meta "model_projection" function result_subtype__ref___projection
 
 meta "inline : no" function result_subtype__ref___projection
 
 val result_subtype__havoc 
   (x : result_subtype__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_opcode__result_subtype__rep
 use        Instruction__random_opcode__result_subtype
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__random_opcode__result_subtype.result_subtype, 
 predicate in_range = Instruction__random_opcode__result_subtype.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__random_opcode__generator__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a

end

(* Module for axiomatizing type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_opcode__generator
 use export Instruction__random_opcode__generator__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type generator =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : generator) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : generator) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : generator.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : generator.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : generator) (b : generator) : bool
 
 function dummy 
   : generator
 
 type generator__ref =
  { mutable generator__content "model_trace:" "name:" : generator }
 
 function generator__ref___projection 
   (a : generator__ref) : generator =
  a.generator__content
 
 meta "model_projection" function generator__ref___projection
 
 meta "inline : no" function generator__ref___projection
 
 val generator__havoc 
   (x : generator__ref) : unit
  writes {x}

end

(* Module for defining the constant "gen" defined at a-nudira.ads:52 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__random__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 function gen #"a-nudira.ads" 52 0 0#
   : Instruction__random_opcode__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:52 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__random__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "random" defined at a-nudira.ads:52 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__random
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 function random 
   (gen : Instruction__random_opcode__generator.generator) : int
 
 predicate random__function_guard 
   (result : int) (gen : Instruction__random_opcode__generator.generator) 

end

(* Module for defining the constant "gen" defined at a-nudira.ads:54 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__reset__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 function gen #"a-nudira.ads" 54 0 0#
   : Instruction__random_opcode__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:54 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__reset__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "initiator" defined at a-nudira.ads:54 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__reset__initiator
 use import "_gnatprove_standard".Main

 function initiator #"a-nudira.ads" 54 0 0#"model" "model_trace:11037" "name:Initiator" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "initiator" defined at a-nudira.ads:54 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__reset__initiator___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "gen" defined at a-nudira.ads:55 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__reset__2__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 function gen #"a-nudira.ads" 55 0 0#
   : Instruction__random_opcode__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:55 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__reset__2__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing the record theory associated to type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__random_opcode__state__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_opcode__state
 use export Instruction__random_opcode__state__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : state) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : state) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : state.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : state.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : state) (b : state) : bool
 
 function dummy 
   : state
 
 type state__ref =
  { mutable state__content "model_trace:" "name:" : state }
 
 function state__ref___projection 
   (a : state__ref) : state =
  a.state__content
 
 meta "model_projection" function state__ref___projection
 
 meta "inline : no" function state__ref___projection
 
 val state__havoc 
   (x : state__ref) : unit
  writes {x}

end

(* Module for defining the constant "gen" defined at a-nudira.ads:61 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__save__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 function gen #"a-nudira.ads" 61 0 0#
   : Instruction__random_opcode__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:61 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__save__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "gen" defined at a-nudira.ads:62 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__reset__3__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 function gen #"a-nudira.ads" 62 0 0#
   : Instruction__random_opcode__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:62 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__reset__3__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "from_state" defined at a-nudira.ads:62 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__reset__3__from_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__state

 function from_state #"a-nudira.ads" 62 0 0#
   : Instruction__random_opcode__state.state
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "from_state" defined at a-nudira.ads:62 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__reset__3__from_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "of_state" defined at a-nudira.ads:66 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__image__of_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__state

 function of_state #"a-nudira.ads" 66 0 0#
   : Instruction__random_opcode__state.state
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "of_state" defined at a-nudira.ads:66 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__image__of_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "image" defined at a-nudira.ads:66 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__image
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Instruction__random_opcode__state

 function image 
   (of_state : Instruction__random_opcode__state.state) : Standard__string.string
 
 predicate image__function_guard 
   (result : Standard__string.string) (of_state : Instruction__random_opcode__state.state) 

end

(* Module for defining the constant "coded_state" defined at a-nudira.ads:67 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_opcode__value__coded_state
 use import "_gnatprove_standard".Main
 use        Standard__string

 function coded_state #"a-nudira.ads" 67 0 0#"model_projected" "model_trace:11163" "name:Coded_State" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "coded_state" defined at a-nudira.ads:67 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__value__coded_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "value" defined at a-nudira.ads:67 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__value
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Instruction__random_opcode__state

 function value 
   (coded_state : Standard__string.string) : Instruction__random_opcode__state.state
 
 predicate value__function_guard 
   (result : Instruction__random_opcode__state.state) (coded_state : Standard__string.string) 

end

(* Module for axiomatizing type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_reg__result_subtype
 use import "_gnatprove_standard".Main
 use import "int".Int

 type result_subtype =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = result_subtype, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type result_subtype__ref =
  { mutable result_subtype__content "model_trace:" "name:" : result_subtype }
 
 function result_subtype__ref___2__projection 
   (a : result_subtype__ref) : result_subtype =
  a.result_subtype__content
 
 meta "model_projection" function result_subtype__ref___2__projection
 
 meta "inline : no" function result_subtype__ref___2__projection
 
 val result_subtype__havoc 
   (x : result_subtype__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_reg__result_subtype__rep
 use        Instruction__random_reg__result_subtype
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__random_reg__result_subtype.result_subtype) : int =
  (Instruction__random_reg__result_subtype.result_subtype'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__random_reg__result_subtype.result_subtype, 
 predicate in_range = Instruction__random_reg__result_subtype.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:8, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__random_reg__generator__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a

end

(* Module for axiomatizing type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_reg__generator
 use export Instruction__random_reg__generator__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type generator =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : generator) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : generator) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : generator.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : generator.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : generator) (b : generator) : bool
 
 function dummy 
   : generator
 
 type generator__ref =
  { mutable generator__content "model_trace:" "name:" : generator }
 
 function generator__ref___2__projection 
   (a : generator__ref) : generator =
  a.generator__content
 
 meta "model_projection" function generator__ref___2__projection
 
 meta "inline : no" function generator__ref___2__projection
 
 val generator__havoc 
   (x : generator__ref) : unit
  writes {x}

end

(* Module for defining the constant "gen" defined at a-nudira.ads:52 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__random__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 function gen #"a-nudira.ads" 52 0 0#
   : Instruction__random_reg__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:52 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__random__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "random" defined at a-nudira.ads:52 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__random
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 function random 
   (gen : Instruction__random_reg__generator.generator) : int
 
 predicate random__function_guard 
   (result : int) (gen : Instruction__random_reg__generator.generator) 

end

(* Module for defining the constant "gen" defined at a-nudira.ads:54 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__reset__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 function gen #"a-nudira.ads" 54 0 0#
   : Instruction__random_reg__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:54 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__reset__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "initiator" defined at a-nudira.ads:54 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__reset__initiator
 use import "_gnatprove_standard".Main

 function initiator #"a-nudira.ads" 54 0 0#"model" "name:Initiator" "model_trace:11704" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "initiator" defined at a-nudira.ads:54 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__reset__initiator___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "gen" defined at a-nudira.ads:55 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__reset__2__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 function gen #"a-nudira.ads" 55 0 0#
   : Instruction__random_reg__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:55 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__reset__2__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing the record theory associated to type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:8, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__random_reg__state__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_reg__state
 use export Instruction__random_reg__state__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : state) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : state) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : state.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : state.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : state) (b : state) : bool
 
 function dummy 
   : state
 
 type state__ref =
  { mutable state__content "model_trace:" "name:" : state }
 
 function state__ref___2__projection 
   (a : state__ref) : state =
  a.state__content
 
 meta "model_projection" function state__ref___2__projection
 
 meta "inline : no" function state__ref___2__projection
 
 val state__havoc 
   (x : state__ref) : unit
  writes {x}

end

(* Module for defining the constant "gen" defined at a-nudira.ads:61 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__save__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 function gen #"a-nudira.ads" 61 0 0#
   : Instruction__random_reg__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:61 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__save__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "gen" defined at a-nudira.ads:62 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__reset__3__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 function gen #"a-nudira.ads" 62 0 0#
   : Instruction__random_reg__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:62 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__reset__3__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "from_state" defined at a-nudira.ads:62 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__reset__3__from_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__state

 function from_state #"a-nudira.ads" 62 0 0#
   : Instruction__random_reg__state.state
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "from_state" defined at a-nudira.ads:62 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__reset__3__from_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "of_state" defined at a-nudira.ads:66 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__image__of_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__state

 function of_state #"a-nudira.ads" 66 0 0#
   : Instruction__random_reg__state.state
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "of_state" defined at a-nudira.ads:66 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__image__of_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "image" defined at a-nudira.ads:66 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__image
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Instruction__random_reg__state

 function image 
   (of_state : Instruction__random_reg__state.state) : Standard__string.string
 
 predicate image__function_guard 
   (result : Standard__string.string) (of_state : Instruction__random_reg__state.state) 

end

(* Module for defining the constant "coded_state" defined at a-nudira.ads:67 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_reg__value__coded_state
 use import "_gnatprove_standard".Main
 use        Standard__string

 function coded_state #"a-nudira.ads" 67 0 0#"model_projected" "name:Coded_State" "model_trace:11830" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "coded_state" defined at a-nudira.ads:67 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__value__coded_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "value" defined at a-nudira.ads:67 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__value
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Instruction__random_reg__state

 function value 
   (coded_state : Standard__string.string) : Instruction__random_reg__state.state
 
 predicate value__function_guard 
   (result : Instruction__random_reg__state.state) (coded_state : Standard__string.string) 

end

(* Module for axiomatizing type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_offset__result_subtype
 use import "_gnatprove_standard".Main
 use import "int".Int

 type result_subtype =
  < range -65535 65535 >
 
 function first 
   : int =
  ( -65535 )
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = result_subtype, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type result_subtype__ref =
  { mutable result_subtype__content "model_trace:" "name:" : result_subtype }
 
 function result_subtype__ref___3__projection 
   (a : result_subtype__ref) : result_subtype =
  a.result_subtype__content
 
 meta "model_projection" function result_subtype__ref___3__projection
 
 meta "inline : no" function result_subtype__ref___3__projection
 
 val result_subtype__havoc 
   (x : result_subtype__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_offset__result_subtype__rep
 use        Instruction__random_offset__result_subtype
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Instruction__random_offset__result_subtype.result_subtype) : int =
  (Instruction__random_offset__result_subtype.result_subtype'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Instruction__random_offset__result_subtype.result_subtype, 
 predicate in_range = Instruction__random_offset__result_subtype.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:9, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__random_offset__generator__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a

end

(* Module for axiomatizing type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_offset__generator
 use export Instruction__random_offset__generator__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type generator =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : generator) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : generator) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : generator.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : generator.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : generator) (b : generator) : bool
 
 function dummy 
   : generator
 
 type generator__ref =
  { mutable generator__content "model_trace:" "name:" : generator }
 
 function generator__ref___3__projection 
   (a : generator__ref) : generator =
  a.generator__content
 
 meta "model_projection" function generator__ref___3__projection
 
 meta "inline : no" function generator__ref___3__projection
 
 val generator__havoc 
   (x : generator__ref) : unit
  writes {x}

end

(* Module for defining the constant "gen" defined at a-nudira.ads:52 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__random__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 function gen #"a-nudira.ads" 52 0 0#
   : Instruction__random_offset__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:52 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__random__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "random" defined at a-nudira.ads:52 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__random
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 function random 
   (gen : Instruction__random_offset__generator.generator) : int
 
 predicate random__function_guard 
   (result : int) (gen : Instruction__random_offset__generator.generator) 

end

(* Module for defining the constant "gen" defined at a-nudira.ads:54 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__reset__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 function gen #"a-nudira.ads" 54 0 0#
   : Instruction__random_offset__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:54 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__reset__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "initiator" defined at a-nudira.ads:54 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__reset__initiator
 use import "_gnatprove_standard".Main

 function initiator #"a-nudira.ads" 54 0 0#"model" "name:Initiator" "model_trace:12369" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "initiator" defined at a-nudira.ads:54 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__reset__initiator___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "gen" defined at a-nudira.ads:55 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__reset__2__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 function gen #"a-nudira.ads" 55 0 0#
   : Instruction__random_offset__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:55 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__reset__2__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing the record theory associated to type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:9, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Instruction__random_offset__state__rep
 use import "_gnatprove_standard".Main

 type __main_type 
 
 function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Instruction__random_offset__state
 use export Instruction__random_offset__state__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type state =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : state) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : state) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : state.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : state.
   ((object__alignment a) >= 0))
 
 function user_eq 
   (a : state) (b : state) : bool
 
 function dummy 
   : state
 
 type state__ref =
  { mutable state__content "model_trace:" "name:" : state }
 
 function state__ref___3__projection 
   (a : state__ref) : state =
  a.state__content
 
 meta "model_projection" function state__ref___3__projection
 
 meta "inline : no" function state__ref___3__projection
 
 val state__havoc 
   (x : state__ref) : unit
  writes {x}

end

(* Module for defining the constant "gen" defined at a-nudira.ads:61 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__save__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 function gen #"a-nudira.ads" 61 0 0#
   : Instruction__random_offset__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:61 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__save__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "gen" defined at a-nudira.ads:62 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__reset__3__gen
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 function gen #"a-nudira.ads" 62 0 0#
   : Instruction__random_offset__generator.generator
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "gen" defined at a-nudira.ads:62 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__reset__3__gen___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "from_state" defined at a-nudira.ads:62 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__reset__3__from_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__state

 function from_state #"a-nudira.ads" 62 0 0#
   : Instruction__random_offset__state.state
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "from_state" defined at a-nudira.ads:62 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__reset__3__from_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "of_state" defined at a-nudira.ads:66 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__image__of_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__state

 function of_state #"a-nudira.ads" 66 0 0#
   : Instruction__random_offset__state.state
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "of_state" defined at a-nudira.ads:66 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__image__of_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "image" defined at a-nudira.ads:66 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__image
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Instruction__random_offset__state

 function image 
   (of_state : Instruction__random_offset__state.state) : Standard__string.string
 
 predicate image__function_guard 
   (result : Standard__string.string) (of_state : Instruction__random_offset__state.state) 

end

(* Module for defining the constant "coded_state" defined at a-nudira.ads:67 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__random_offset__value__coded_state
 use import "_gnatprove_standard".Main
 use        Standard__string

 function coded_state #"a-nudira.ads" 67 0 0#"model_projected" "name:Coded_State" "model_trace:12495" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "coded_state" defined at a-nudira.ads:67 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__value__coded_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "value" defined at a-nudira.ads:67 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__value
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Instruction__random_offset__state

 function value 
   (coded_state : Standard__string.string) : Instruction__random_offset__state.state
 
 predicate value__function_guard 
   (result : Instruction__random_offset__state.state) (coded_state : Standard__string.string) 

end

(* Module for defining the constant "r" defined at instruction.adb:65, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__putreg__r
 use import "_gnatprove_standard".Main

 function r #"instruction.adb" 65 0 0#"model" "model_trace:15803" "name:R" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "r" defined at instruction.adb:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__putreg__r___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offs" defined at instruction.adb:71, created in Gnat2Why.Decls.Translate_Constant *)
module Instruction__putoffset__offs
 use import "_gnatprove_standard".Main

 function offs #"instruction.adb" 71 0 0#"model" "model_trace:15848" "name:Offs" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offs" defined at instruction.adb:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__putoffset__offs___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "S45b" defined at instruction.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Instruction__debugprintinstr__S45b
 use export Instruction__instr__rep
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__instr

 type s45b =
  __rep
 
 predicate in_range #"instruction.adb" 76 0 0#
   (rec__instruction__instr__op : int) (a : Instruction__instr.instr)  =
  #"instruction.adb" 76 0 0#(rec__instruction__instr__op = (Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op a.Instruction__instr.__split_discrs)))
 
 val range_check_ #"instruction.adb" 76 0 0#
   (rec__instruction__instr__op : int) (a : Instruction__instr.instr) : Instruction__instr.instr
  requires { #"instruction.adb" 76 0 0# (in_range rec__instruction__instr__op a) }
  ensures { #"instruction.adb" 76 0 0# (result = a) }
 
 function value__size 
   : int
 
 function object__size 
   (a : s45b) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : s45b) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : s45b.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : s45b.
   ((object__alignment a) >= 0))
 
 function instruction__instr__op__first__bit 
   : int
 
 function instruction__instr__op__last__bit 
   : int
 
 function instruction__instr__op__position 
   : int
 
 axiom instruction__instr__op__first__bit_axiom :
  ((instruction__instr__op__first__bit ) >= 0)
 
 axiom instruction__instr__op__last__bit_axiom :
  ((instruction__instr__op__last__bit ) > (instruction__instr__op__first__bit ))
 
 axiom instruction__instr__op__position_axiom :
  ((instruction__instr__op__position ) >= 0)
 
 function instruction__instr__addrd__first__bit 
   : int
 
 function instruction__instr__addrd__last__bit 
   : int
 
 function instruction__instr__addrd__position 
   : int
 
 axiom instruction__instr__addrd__first__bit_axiom :
  ((instruction__instr__addrd__first__bit ) >= 0)
 
 axiom instruction__instr__addrd__last__bit_axiom :
  ((instruction__instr__addrd__last__bit ) > (instruction__instr__addrd__first__bit ))
 
 axiom instruction__instr__addrd__position_axiom :
  ((instruction__instr__addrd__position ) >= 0)
 
 function instruction__instr__addrs1__first__bit 
   : int
 
 function instruction__instr__addrs1__last__bit 
   : int
 
 function instruction__instr__addrs1__position 
   : int
 
 axiom instruction__instr__addrs1__first__bit_axiom :
  ((instruction__instr__addrs1__first__bit ) >= 0)
 
 axiom instruction__instr__addrs1__last__bit_axiom :
  ((instruction__instr__addrs1__last__bit ) > (instruction__instr__addrs1__first__bit ))
 
 axiom instruction__instr__addrs1__position_axiom :
  ((instruction__instr__addrs1__position ) >= 0)
 
 function instruction__instr__addrs2__first__bit 
   : int
 
 function instruction__instr__addrs2__last__bit 
   : int
 
 function instruction__instr__addrs2__position 
   : int
 
 axiom instruction__instr__addrs2__first__bit_axiom :
  ((instruction__instr__addrs2__first__bit ) >= 0)
 
 axiom instruction__instr__addrs2__last__bit_axiom :
  ((instruction__instr__addrs2__last__bit ) > (instruction__instr__addrs2__first__bit ))
 
 axiom instruction__instr__addrs2__position_axiom :
  ((instruction__instr__addrs2__position ) >= 0)
 
 function instruction__instr__subrd__first__bit 
   : int
 
 function instruction__instr__subrd__last__bit 
   : int
 
 function instruction__instr__subrd__position 
   : int
 
 axiom instruction__instr__subrd__first__bit_axiom :
  ((instruction__instr__subrd__first__bit ) >= 0)
 
 axiom instruction__instr__subrd__last__bit_axiom :
  ((instruction__instr__subrd__last__bit ) > (instruction__instr__subrd__first__bit ))
 
 axiom instruction__instr__subrd__position_axiom :
  ((instruction__instr__subrd__position ) >= 0)
 
 function instruction__instr__subrs1__first__bit 
   : int
 
 function instruction__instr__subrs1__last__bit 
   : int
 
 function instruction__instr__subrs1__position 
   : int
 
 axiom instruction__instr__subrs1__first__bit_axiom :
  ((instruction__instr__subrs1__first__bit ) >= 0)
 
 axiom instruction__instr__subrs1__last__bit_axiom :
  ((instruction__instr__subrs1__last__bit ) > (instruction__instr__subrs1__first__bit ))
 
 axiom instruction__instr__subrs1__position_axiom :
  ((instruction__instr__subrs1__position ) >= 0)
 
 function instruction__instr__subrs2__first__bit 
   : int
 
 function instruction__instr__subrs2__last__bit 
   : int
 
 function instruction__instr__subrs2__position 
   : int
 
 axiom instruction__instr__subrs2__first__bit_axiom :
  ((instruction__instr__subrs2__first__bit ) >= 0)
 
 axiom instruction__instr__subrs2__last__bit_axiom :
  ((instruction__instr__subrs2__last__bit ) > (instruction__instr__subrs2__first__bit ))
 
 axiom instruction__instr__subrs2__position_axiom :
  ((instruction__instr__subrs2__position ) >= 0)
 
 function instruction__instr__mulrd__first__bit 
   : int
 
 function instruction__instr__mulrd__last__bit 
   : int
 
 function instruction__instr__mulrd__position 
   : int
 
 axiom instruction__instr__mulrd__first__bit_axiom :
  ((instruction__instr__mulrd__first__bit ) >= 0)
 
 axiom instruction__instr__mulrd__last__bit_axiom :
  ((instruction__instr__mulrd__last__bit ) > (instruction__instr__mulrd__first__bit ))
 
 axiom instruction__instr__mulrd__position_axiom :
  ((instruction__instr__mulrd__position ) >= 0)
 
 function instruction__instr__mulrs1__first__bit 
   : int
 
 function instruction__instr__mulrs1__last__bit 
   : int
 
 function instruction__instr__mulrs1__position 
   : int
 
 axiom instruction__instr__mulrs1__first__bit_axiom :
  ((instruction__instr__mulrs1__first__bit ) >= 0)
 
 axiom instruction__instr__mulrs1__last__bit_axiom :
  ((instruction__instr__mulrs1__last__bit ) > (instruction__instr__mulrs1__first__bit ))
 
 axiom instruction__instr__mulrs1__position_axiom :
  ((instruction__instr__mulrs1__position ) >= 0)
 
 function instruction__instr__mulrs2__first__bit 
   : int
 
 function instruction__instr__mulrs2__last__bit 
   : int
 
 function instruction__instr__mulrs2__position 
   : int
 
 axiom instruction__instr__mulrs2__first__bit_axiom :
  ((instruction__instr__mulrs2__first__bit ) >= 0)
 
 axiom instruction__instr__mulrs2__last__bit_axiom :
  ((instruction__instr__mulrs2__last__bit ) > (instruction__instr__mulrs2__first__bit ))
 
 axiom instruction__instr__mulrs2__position_axiom :
  ((instruction__instr__mulrs2__position ) >= 0)
 
 function instruction__instr__divrd__first__bit 
   : int
 
 function instruction__instr__divrd__last__bit 
   : int
 
 function instruction__instr__divrd__position 
   : int
 
 axiom instruction__instr__divrd__first__bit_axiom :
  ((instruction__instr__divrd__first__bit ) >= 0)
 
 axiom instruction__instr__divrd__last__bit_axiom :
  ((instruction__instr__divrd__last__bit ) > (instruction__instr__divrd__first__bit ))
 
 axiom instruction__instr__divrd__position_axiom :
  ((instruction__instr__divrd__position ) >= 0)
 
 function instruction__instr__divrs1__first__bit 
   : int
 
 function instruction__instr__divrs1__last__bit 
   : int
 
 function instruction__instr__divrs1__position 
   : int
 
 axiom instruction__instr__divrs1__first__bit_axiom :
  ((instruction__instr__divrs1__first__bit ) >= 0)
 
 axiom instruction__instr__divrs1__last__bit_axiom :
  ((instruction__instr__divrs1__last__bit ) > (instruction__instr__divrs1__first__bit ))
 
 axiom instruction__instr__divrs1__position_axiom :
  ((instruction__instr__divrs1__position ) >= 0)
 
 function instruction__instr__divrs2__first__bit 
   : int
 
 function instruction__instr__divrs2__last__bit 
   : int
 
 function instruction__instr__divrs2__position 
   : int
 
 axiom instruction__instr__divrs2__first__bit_axiom :
  ((instruction__instr__divrs2__first__bit ) >= 0)
 
 axiom instruction__instr__divrs2__last__bit_axiom :
  ((instruction__instr__divrs2__last__bit ) > (instruction__instr__divrs2__first__bit ))
 
 axiom instruction__instr__divrs2__position_axiom :
  ((instruction__instr__divrs2__position ) >= 0)
 
 function instruction__instr__retrs__first__bit 
   : int
 
 function instruction__instr__retrs__last__bit 
   : int
 
 function instruction__instr__retrs__position 
   : int
 
 axiom instruction__instr__retrs__first__bit_axiom :
  ((instruction__instr__retrs__first__bit ) >= 0)
 
 axiom instruction__instr__retrs__last__bit_axiom :
  ((instruction__instr__retrs__last__bit ) > (instruction__instr__retrs__first__bit ))
 
 axiom instruction__instr__retrs__position_axiom :
  ((instruction__instr__retrs__position ) >= 0)
 
 function instruction__instr__ldrrd__first__bit 
   : int
 
 function instruction__instr__ldrrd__last__bit 
   : int
 
 function instruction__instr__ldrrd__position 
   : int
 
 axiom instruction__instr__ldrrd__first__bit_axiom :
  ((instruction__instr__ldrrd__first__bit ) >= 0)
 
 axiom instruction__instr__ldrrd__last__bit_axiom :
  ((instruction__instr__ldrrd__last__bit ) > (instruction__instr__ldrrd__first__bit ))
 
 axiom instruction__instr__ldrrd__position_axiom :
  ((instruction__instr__ldrrd__position ) >= 0)
 
 function instruction__instr__ldrrs__first__bit 
   : int
 
 function instruction__instr__ldrrs__last__bit 
   : int
 
 function instruction__instr__ldrrs__position 
   : int
 
 axiom instruction__instr__ldrrs__first__bit_axiom :
  ((instruction__instr__ldrrs__first__bit ) >= 0)
 
 axiom instruction__instr__ldrrs__last__bit_axiom :
  ((instruction__instr__ldrrs__last__bit ) > (instruction__instr__ldrrs__first__bit ))
 
 axiom instruction__instr__ldrrs__position_axiom :
  ((instruction__instr__ldrrs__position ) >= 0)
 
 function instruction__instr__ldroffs__first__bit 
   : int
 
 function instruction__instr__ldroffs__last__bit 
   : int
 
 function instruction__instr__ldroffs__position 
   : int
 
 axiom instruction__instr__ldroffs__first__bit_axiom :
  ((instruction__instr__ldroffs__first__bit ) >= 0)
 
 axiom instruction__instr__ldroffs__last__bit_axiom :
  ((instruction__instr__ldroffs__last__bit ) > (instruction__instr__ldroffs__first__bit ))
 
 axiom instruction__instr__ldroffs__position_axiom :
  ((instruction__instr__ldroffs__position ) >= 0)
 
 function instruction__instr__strra__first__bit 
   : int
 
 function instruction__instr__strra__last__bit 
   : int
 
 function instruction__instr__strra__position 
   : int
 
 axiom instruction__instr__strra__first__bit_axiom :
  ((instruction__instr__strra__first__bit ) >= 0)
 
 axiom instruction__instr__strra__last__bit_axiom :
  ((instruction__instr__strra__last__bit ) > (instruction__instr__strra__first__bit ))
 
 axiom instruction__instr__strra__position_axiom :
  ((instruction__instr__strra__position ) >= 0)
 
 function instruction__instr__stroffs__first__bit 
   : int
 
 function instruction__instr__stroffs__last__bit 
   : int
 
 function instruction__instr__stroffs__position 
   : int
 
 axiom instruction__instr__stroffs__first__bit_axiom :
  ((instruction__instr__stroffs__first__bit ) >= 0)
 
 axiom instruction__instr__stroffs__last__bit_axiom :
  ((instruction__instr__stroffs__last__bit ) > (instruction__instr__stroffs__first__bit ))
 
 axiom instruction__instr__stroffs__position_axiom :
  ((instruction__instr__stroffs__position ) >= 0)
 
 function instruction__instr__strrb__first__bit 
   : int
 
 function instruction__instr__strrb__last__bit 
   : int
 
 function instruction__instr__strrb__position 
   : int
 
 axiom instruction__instr__strrb__first__bit_axiom :
  ((instruction__instr__strrb__first__bit ) >= 0)
 
 axiom instruction__instr__strrb__last__bit_axiom :
  ((instruction__instr__strrb__last__bit ) > (instruction__instr__strrb__first__bit ))
 
 axiom instruction__instr__strrb__position_axiom :
  ((instruction__instr__strrb__position ) >= 0)
 
 function instruction__instr__movrd__first__bit 
   : int
 
 function instruction__instr__movrd__last__bit 
   : int
 
 function instruction__instr__movrd__position 
   : int
 
 axiom instruction__instr__movrd__first__bit_axiom :
  ((instruction__instr__movrd__first__bit ) >= 0)
 
 axiom instruction__instr__movrd__last__bit_axiom :
  ((instruction__instr__movrd__last__bit ) > (instruction__instr__movrd__first__bit ))
 
 axiom instruction__instr__movrd__position_axiom :
  ((instruction__instr__movrd__position ) >= 0)
 
 function instruction__instr__movoffs__first__bit 
   : int
 
 function instruction__instr__movoffs__last__bit 
   : int
 
 function instruction__instr__movoffs__position 
   : int
 
 axiom instruction__instr__movoffs__first__bit_axiom :
  ((instruction__instr__movoffs__first__bit ) >= 0)
 
 axiom instruction__instr__movoffs__last__bit_axiom :
  ((instruction__instr__movoffs__last__bit ) > (instruction__instr__movoffs__first__bit ))
 
 axiom instruction__instr__movoffs__position_axiom :
  ((instruction__instr__movoffs__position ) >= 0)
 
 function instruction__instr__jmpoffs__first__bit 
   : int
 
 function instruction__instr__jmpoffs__last__bit 
   : int
 
 function instruction__instr__jmpoffs__position 
   : int
 
 axiom instruction__instr__jmpoffs__first__bit_axiom :
  ((instruction__instr__jmpoffs__first__bit ) >= 0)
 
 axiom instruction__instr__jmpoffs__last__bit_axiom :
  ((instruction__instr__jmpoffs__last__bit ) > (instruction__instr__jmpoffs__first__bit ))
 
 axiom instruction__instr__jmpoffs__position_axiom :
  ((instruction__instr__jmpoffs__position ) >= 0)
 
 function instruction__instr__jzra__first__bit 
   : int
 
 function instruction__instr__jzra__last__bit 
   : int
 
 function instruction__instr__jzra__position 
   : int
 
 axiom instruction__instr__jzra__first__bit_axiom :
  ((instruction__instr__jzra__first__bit ) >= 0)
 
 axiom instruction__instr__jzra__last__bit_axiom :
  ((instruction__instr__jzra__last__bit ) > (instruction__instr__jzra__first__bit ))
 
 axiom instruction__instr__jzra__position_axiom :
  ((instruction__instr__jzra__position ) >= 0)
 
 function instruction__instr__jzoffs__first__bit 
   : int
 
 function instruction__instr__jzoffs__last__bit 
   : int
 
 function instruction__instr__jzoffs__position 
   : int
 
 axiom instruction__instr__jzoffs__first__bit_axiom :
  ((instruction__instr__jzoffs__first__bit ) >= 0)
 
 axiom instruction__instr__jzoffs__last__bit_axiom :
  ((instruction__instr__jzoffs__last__bit ) > (instruction__instr__jzoffs__first__bit ))
 
 axiom instruction__instr__jzoffs__position_axiom :
  ((instruction__instr__jzoffs__position ) >= 0)
 
 function user_eq 
   (a : s45b) (b : s45b) : bool
 
 function dummy 
   : s45b
 
 type s45b__ref =
  { mutable s45b__content "model_trace:" "name:" : s45b }
 
 function s45b__ref___projection 
   (a : s45b__ref) : s45b =
  a.s45b__content
 
 meta "model_projection" function s45b__ref___projection
 
 meta "inline : no" function s45b__ref___projection
 
 val s45b__havoc 
   (x : s45b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "inst" defined at instruction.ads:74, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__generaterandominstr__inst
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 val inst__split_fields #"instruction.ads" 74 0 0#"model_projected" "model_trace:3516" "name:Inst"  : Instruction__instr.__split_fields__ref 
 
 val inst__split_discrs #"instruction.ads" 74 0 0# : Instruction__instr.__split_discrs__ref 
 
 function inst__attr__constrained #"instruction.ads" 74 0 0#
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "inst" defined at instruction.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__generaterandominstr__inst___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "to_state" defined at a-nudira.ads:61 instantiated at instruction.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__random_opcode__save__to_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__state

 val to_state #"a-nudira.ads" 61 0 0# : Instruction__random_opcode__state.state__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to_state" defined at a-nudira.ads:61 instantiated at instruction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_opcode__save__to_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "to_state" defined at a-nudira.ads:61 instantiated at instruction.adb:8, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__random_reg__save__to_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__state

 val to_state #"a-nudira.ads" 61 0 0# : Instruction__random_reg__state.state__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to_state" defined at a-nudira.ads:61 instantiated at instruction.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_reg__save__to_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "to_state" defined at a-nudira.ads:61 instantiated at instruction.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__random_offset__save__to_state
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__state

 val to_state #"a-nudira.ads" 61 0 0# : Instruction__random_offset__state.state__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to_state" defined at a-nudira.ads:61 instantiated at instruction.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__random_offset__save__to_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "opcodeg" defined at instruction.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__opcodeg
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 val opcodeg #"instruction.adb" 10 0 0# : Instruction__random_opcode__generator.generator__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "opcodeg" defined at instruction.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__opcodeg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "regg" defined at instruction.adb:11, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__regg
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 val regg #"instruction.adb" 11 0 0# : Instruction__random_reg__generator.generator__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "regg" defined at instruction.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__regg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "offsetg" defined at instruction.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module Instruction__offsetg
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 val offsetg #"instruction.adb" 12 0 0# : Instruction__random_offset__generator.generator__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "offsetg" defined at instruction.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Instruction__offsetg___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "put" defined at debug.ads:4, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line" defined at debug.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at debug.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line" defined at debug.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__new_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at debug.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Debug__put__3
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def 
   (temp___156 : int) (temp___157 : int) (temp___158 : int) (temp___159 : int) (temp___160 : int) (temp___161 : int) (temp___162 : int) (temp___163 : int) (temp___164 : int) (temp___165 : int) (temp___166 : int) (temp___167 : int) (temp___168 : int) (temp___169 : int) (temp___170 : int) (temp___171 : int) : Array__Int__Standard__integer.map

end

(* Module for possibly declaring a logic function for "init" defined at instruction.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__init
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "generaterandominstr" defined at instruction.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__generaterandominstr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "debugprintinstr" defined at instruction.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__debugprintinstr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset" defined at a-nudira.ads:54 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__reset
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__2" defined at a-nudira.ads:55 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__reset__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "save" defined at a-nudira.ads:61 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__save
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__3" defined at a-nudira.ads:62 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_opcode__reset__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset" defined at a-nudira.ads:54 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__reset
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__2" defined at a-nudira.ads:55 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__reset__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "save" defined at a-nudira.ads:61 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__save
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__3" defined at a-nudira.ads:62 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_reg__reset__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset" defined at a-nudira.ads:54 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__reset
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__2" defined at a-nudira.ads:55 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__reset__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "save" defined at a-nudira.ads:61 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__save
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__3" defined at a-nudira.ads:62 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__random_offset__reset__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "putreg" defined at instruction.adb:65, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__putreg
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "putoffset" defined at instruction.adb:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Instruction__putoffset
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_8B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool)  =
  (if (( temp___is_init_175 \/ (Interfaces__integer_8.first <= Interfaces__integer_8.last) )) then (
   (Interfaces__integer_8.dynamic_property Interfaces__integer_8.first Interfaces__integer_8.last temp___expr_179)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_16B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool)  =
  (if (( temp___is_init_182 \/ (Interfaces__integer_16.first <= Interfaces__integer_16.last) )) then (
   (Interfaces__integer_16.dynamic_property Interfaces__integer_16.first Interfaces__integer_16.last temp___expr_186)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool)  =
  (if (( temp___is_init_189 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_193)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool)  =
  true

end

(* Module giving axioms for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_200 : int) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool)  =
  (if (( temp___is_init_196 \/ (Interfaces__integer_64.first <= Interfaces__integer_64.last) )) then (
   (Interfaces__integer_64.dynamic_property Interfaces__integer_64.first Interfaces__integer_64.last temp___expr_200)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_201 : int) (temp___skip_top_level_202 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_8___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Interfaces__unsigned_8

 predicate dynamic_invariant "inline" 
   (temp___expr_207 : BV8.t) (temp___is_init_203 : bool) (temp___skip_constant_204 : bool) (temp___do_toplevel_205 : bool) (temp___do_typ_inv_206 : bool)  =
  (if (( temp___is_init_203 \/ (BV8.ule Interfaces__unsigned_8.first Interfaces__unsigned_8.last) )) then (
   (Interfaces__unsigned_8.dynamic_property Interfaces__unsigned_8.first Interfaces__unsigned_8.last temp___expr_207)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_208 : BV8.t) (temp___skip_top_level_209 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_16___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        Interfaces__unsigned_16

 predicate dynamic_invariant "inline" 
   (temp___expr_214 : BV16.t) (temp___is_init_210 : bool) (temp___skip_constant_211 : bool) (temp___do_toplevel_212 : bool) (temp___do_typ_inv_213 : bool)  =
  (if (( temp___is_init_210 \/ (BV16.ule Interfaces__unsigned_16.first Interfaces__unsigned_16.last) )) then (
   (Interfaces__unsigned_16.dynamic_property Interfaces__unsigned_16.first Interfaces__unsigned_16.last temp___expr_214)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_215 : BV16.t) (temp___skip_top_level_216 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_24___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_24

 predicate dynamic_invariant "inline" 
   (temp___expr_221 : BV32.t) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool)  =
  (if (( temp___is_init_217 \/ (BV32.ule Interfaces__unsigned_24.first Interfaces__unsigned_24.last) )) then (
   (Interfaces__unsigned_24.dynamic_property Interfaces__unsigned_24.first Interfaces__unsigned_24.last temp___expr_221)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_222 : BV32.t) (temp___skip_top_level_223 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_32

 predicate dynamic_invariant "inline" 
   (temp___expr_228 : BV32.t) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool)  =
  (if (( temp___is_init_224 \/ (BV32.ule Interfaces__unsigned_32.first Interfaces__unsigned_32.last) )) then (
   (Interfaces__unsigned_32.dynamic_property Interfaces__unsigned_32.first Interfaces__unsigned_32.last temp___expr_228)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_229 : BV32.t) (temp___skip_top_level_230 : bool)  =
  true

end

(* Module giving axioms for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64

 predicate dynamic_invariant "inline" 
   (temp___expr_235 : BV64.t) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool) (temp___do_typ_inv_234 : bool)  =
  (if (( temp___is_init_231 \/ (BV64.ule Interfaces__unsigned_64.first Interfaces__unsigned_64.last) )) then (
   (Interfaces__unsigned_64.dynamic_property Interfaces__unsigned_64.first Interfaces__unsigned_64.last temp___expr_235)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_236 : BV64.t) (temp___skip_top_level_237 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Interfaces__ieee_float_32

 predicate dynamic_invariant "inline" 
   (temp___expr_242 : Float32.t) (temp___is_init_238 : bool) (temp___skip_constant_239 : bool) (temp___do_toplevel_240 : bool) (temp___do_typ_inv_241 : bool)  =
  (if (( temp___is_init_238 \/ (Float32.le Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last) )) then (
   (Interfaces__ieee_float_32.dynamic_property Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last temp___expr_242)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_243 : Float32.t) (temp___skip_top_level_244 : bool)  =
  true

end

(* Module giving axioms for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Interfaces__ieee_float_64

 predicate dynamic_invariant "inline" 
   (temp___expr_249 : Float64.t) (temp___is_init_245 : bool) (temp___skip_constant_246 : bool) (temp___do_toplevel_247 : bool) (temp___do_typ_inv_248 : bool)  =
  (if (( temp___is_init_245 \/ (Float64.le Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last) )) then (
   (Interfaces__ieee_float_64.dynamic_property Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last temp___expr_249)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_250 : Float64.t) (temp___skip_top_level_251 : bool)  =
  true

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant "inline" 
   (temp___expr_256 : int) (temp___is_init_252 : bool) (temp___skip_constant_253 : bool) (temp___do_toplevel_254 : bool) (temp___do_typ_inv_255 : bool)  =
  (if (( temp___is_init_252 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_256)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_257 : int) (temp___skip_top_level_258 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address

 predicate dynamic_invariant "inline" 
   (temp___expr_263 : BV64.t) (temp___is_init_259 : bool) (temp___skip_constant_260 : bool) (temp___do_toplevel_261 : bool) (temp___do_typ_inv_262 : bool)  =
  (if (( temp___is_init_259 \/ (BV64.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_263)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_264 : BV64.t) (temp___skip_top_level_265 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant "inline" 
   (temp___expr_270 : int) (temp___is_init_266 : bool) (temp___skip_constant_267 : bool) (temp___do_toplevel_268 : bool) (temp___do_typ_inv_269 : bool)  =
  (if (( temp___is_init_266 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_270)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_271 : int) (temp___skip_top_level_272 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_277 : int) (temp___is_init_273 : bool) (temp___skip_constant_274 : bool) (temp___do_toplevel_275 : bool) (temp___do_typ_inv_276 : bool)  =
  (if (( temp___is_init_273 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_277)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_278 : int) (temp___skip_top_level_279 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant "inline" 
   (temp___expr_284 : int) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool)  =
  (if (( temp___is_init_280 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_284)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_285 : int) (temp___skip_top_level_286 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_291 : int) (temp___is_init_287 : bool) (temp___skip_constant_288 : bool) (temp___do_toplevel_289 : bool) (temp___do_typ_inv_290 : bool)  =
  (if (( temp___is_init_287 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_291)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_292 : int) (temp___skip_top_level_293 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_298 : Array__Int__Standard__integer.map) (temp___is_init_294 : bool) (temp___skip_constant_295 : bool) (temp___do_toplevel_296 : bool) (temp___do_typ_inv_297 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_300 : Array__Int__Standard__integer.map) (temp___skip_top_level_301 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "opcode" defined at instruction.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__opcode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode

 predicate dynamic_invariant "inline" 
   (temp___expr_308 : int) (temp___is_init_304 : bool) (temp___skip_constant_305 : bool) (temp___do_toplevel_306 : bool) (temp___do_typ_inv_307 : bool)  =
  (if (( temp___is_init_304 \/ (Instruction__opcode.first <= Instruction__opcode.last) )) then (
   (Instruction__opcode.dynamic_property Instruction__opcode.first Instruction__opcode.last temp___expr_308)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_309 : int) (temp___skip_top_level_310 : bool)  =
  true

end

(* Module giving axioms for type "TregB" defined at instruction.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__TregB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reg" defined at instruction.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__reg___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__reg

 predicate dynamic_invariant "inline" 
   (temp___expr_315 : int) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool) (temp___do_typ_inv_314 : bool)  =
  (if (( temp___is_init_311 \/ (Instruction__reg.first <= Instruction__reg.last) )) then (
   (Instruction__reg.dynamic_property Instruction__reg.first Instruction__reg.last temp___expr_315)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_316 : int) (temp___skip_top_level_317 : bool)  =
  true

end

(* Module giving axioms for type "TaddrB" defined at instruction.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__TaddrB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "addr" defined at instruction.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__addr___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__addr

 predicate dynamic_invariant "inline" 
   (temp___expr_322 : int) (temp___is_init_318 : bool) (temp___skip_constant_319 : bool) (temp___do_toplevel_320 : bool) (temp___do_typ_inv_321 : bool)  =
  (if (( temp___is_init_318 \/ (Instruction__addr.first <= Instruction__addr.last) )) then (
   (Instruction__addr.dynamic_property Instruction__addr.first Instruction__addr.last temp___expr_322)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_323 : int) (temp___skip_top_level_324 : bool)  =
  true

end

(* Module giving axioms for type "ToffsetB" defined at instruction.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__ToffsetB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "offset" defined at instruction.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__offset___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__offset

 predicate dynamic_invariant "inline" 
   (temp___expr_329 : int) (temp___is_init_325 : bool) (temp___skip_constant_326 : bool) (temp___do_toplevel_327 : bool) (temp___do_typ_inv_328 : bool)  =
  (if (( temp___is_init_325 \/ (Instruction__offset.first <= Instruction__offset.last) )) then (
   (Instruction__offset.dynamic_property Instruction__offset.first Instruction__offset.last temp___expr_329)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_330 : int) (temp___skip_top_level_331 : bool)  =
  true

end

(* Module giving axioms for type "instr" defined at instruction.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__instr___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__instr

 predicate dynamic_invariant "inline" 
   (temp___expr_336 : Instruction__instr.instr) (temp___is_init_332 : bool) (temp___skip_constant_333 : bool) (temp___do_toplevel_334 : bool) (temp___do_typ_inv_335 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_338 : Instruction__instr.instr) (temp___skip_top_level_339 : bool)  =
  ( ((Instruction__instr.attr__constrained temp___expr_338) = False) /\ (let temp___340 = (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___expr_338)) in (
   ((Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs temp___expr_338))) = 0)))
   )

end

(* Module giving axioms for type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_opcode__result_subtype___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__random_opcode__result_subtype

 predicate dynamic_invariant "inline" 
   (temp___expr_371 : int) (temp___is_init_367 : bool) (temp___skip_constant_368 : bool) (temp___do_toplevel_369 : bool) (temp___do_typ_inv_370 : bool)  =
  (if (( temp___is_init_367 \/ (Instruction__random_opcode__result_subtype.first <= Instruction__random_opcode__result_subtype.last) )) then (
   (Instruction__random_opcode__result_subtype.dynamic_property Instruction__random_opcode__result_subtype.first Instruction__random_opcode__result_subtype.last temp___expr_371)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_372 : int) (temp___skip_top_level_373 : bool)  =
  true

end

(* Module giving axioms for type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_opcode__generator___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 predicate dynamic_invariant "inline" 
   (temp___expr_378 : Instruction__random_opcode__generator.generator) (temp___is_init_374 : bool) (temp___skip_constant_375 : bool) (temp___do_toplevel_376 : bool) (temp___do_typ_inv_377 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_379 : Instruction__random_opcode__generator.generator) (temp___skip_top_level_380 : bool)  =
  true

end

(* Module giving axioms for type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_opcode__state___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__state

 predicate dynamic_invariant "inline" 
   (temp___expr_385 : Instruction__random_opcode__state.state) (temp___is_init_381 : bool) (temp___skip_constant_382 : bool) (temp___do_toplevel_383 : bool) (temp___do_typ_inv_384 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_386 : Instruction__random_opcode__state.state) (temp___skip_top_level_387 : bool)  =
  true

end

(* Module giving axioms for type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_reg__result_subtype___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__random_reg__result_subtype

 predicate dynamic_invariant "inline" 
   (temp___expr_396 : int) (temp___is_init_392 : bool) (temp___skip_constant_393 : bool) (temp___do_toplevel_394 : bool) (temp___do_typ_inv_395 : bool)  =
  (if (( temp___is_init_392 \/ (Instruction__random_reg__result_subtype.first <= Instruction__random_reg__result_subtype.last) )) then (
   (Instruction__random_reg__result_subtype.dynamic_property Instruction__random_reg__result_subtype.first Instruction__random_reg__result_subtype.last temp___expr_396)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_397 : int) (temp___skip_top_level_398 : bool)  =
  true

end

(* Module giving axioms for type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_reg__generator___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 predicate dynamic_invariant "inline" 
   (temp___expr_403 : Instruction__random_reg__generator.generator) (temp___is_init_399 : bool) (temp___skip_constant_400 : bool) (temp___do_toplevel_401 : bool) (temp___do_typ_inv_402 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_404 : Instruction__random_reg__generator.generator) (temp___skip_top_level_405 : bool)  =
  true

end

(* Module giving axioms for type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_reg__state___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__state

 predicate dynamic_invariant "inline" 
   (temp___expr_410 : Instruction__random_reg__state.state) (temp___is_init_406 : bool) (temp___skip_constant_407 : bool) (temp___do_toplevel_408 : bool) (temp___do_typ_inv_409 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_411 : Instruction__random_reg__state.state) (temp___skip_top_level_412 : bool)  =
  true

end

(* Module giving axioms for type "result_subtype" defined at a-nudira.ads:42 instantiated at instruction.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_offset__result_subtype___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__random_offset__result_subtype

 predicate dynamic_invariant "inline" 
   (temp___expr_421 : int) (temp___is_init_417 : bool) (temp___skip_constant_418 : bool) (temp___do_toplevel_419 : bool) (temp___do_typ_inv_420 : bool)  =
  (if (( temp___is_init_417 \/ (Instruction__random_offset__result_subtype.first <= Instruction__random_offset__result_subtype.last) )) then (
   (Instruction__random_offset__result_subtype.dynamic_property Instruction__random_offset__result_subtype.first Instruction__random_offset__result_subtype.last temp___expr_421)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_422 : int) (temp___skip_top_level_423 : bool)  =
  true

end

(* Module giving axioms for type "generator" defined at a-nudira.ads:50 instantiated at instruction.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_offset__generator___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 predicate dynamic_invariant "inline" 
   (temp___expr_428 : Instruction__random_offset__generator.generator) (temp___is_init_424 : bool) (temp___skip_constant_425 : bool) (temp___do_toplevel_426 : bool) (temp___do_typ_inv_427 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_429 : Instruction__random_offset__generator.generator) (temp___skip_top_level_430 : bool)  =
  true

end

(* Module giving axioms for type "state" defined at a-nudira.ads:59 instantiated at instruction.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__random_offset__state___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__state

 predicate dynamic_invariant "inline" 
   (temp___expr_435 : Instruction__random_offset__state.state) (temp___is_init_431 : bool) (temp___skip_constant_432 : bool) (temp___do_toplevel_433 : bool) (temp___do_typ_inv_434 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_436 : Instruction__random_offset__state.state) (temp___skip_top_level_437 : bool)  =
  true

end

(* Module giving axioms for type "S45b" defined at instruction.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Instruction__debugprintinstr__S45b___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__instr
 use        Instruction__debugprintinstr__inst
 use        Instruction__debugprintinstr__S45b

 predicate dynamic_invariant "inline" 
   (temp___expr_446 : Instruction__debugprintinstr__S45b.s45b) (temp___is_init_442 : bool) (temp___skip_constant_443 : bool) (temp___do_toplevel_444 : bool) (temp___do_typ_inv_445 : bool)  =
  ( (if (temp___skip_constant_443) then (
   true) else (
   (Instruction__debugprintinstr__S45b.in_range (Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs Instruction__debugprintinstr__inst.inst))) (Instruction__debugprintinstr__S45b.to_base temp___expr_446)))) /\ ((Instruction__debugprintinstr__S45b.attr__constrained temp___expr_446) = True) )
 
 predicate default_initial_assumption "inline" 
   (temp___expr_448 : Instruction__debugprintinstr__S45b.s45b) (temp___skip_top_level_449 : bool)  =
  ( ((Instruction__debugprintinstr__S45b.attr__constrained temp___expr_448) = True) /\ (let temp___450 = (Instruction__instr.rec__instruction__instr__op (Instruction__debugprintinstr__S45b.__split_discrs temp___expr_448)) in (
   ((Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op (Instruction__debugprintinstr__S45b.__split_discrs temp___expr_448))) = (Instruction__opcode__rep.to_rep (Instruction__instr.rec__instruction__instr__op (Instruction__instr.__split_discrs Instruction__debugprintinstr__inst.inst))))))
   )

end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = ( 0 : BV64.t ))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer___axiom
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___156   temp___157   temp___158   temp___159   temp___160   temp___161   temp___162   temp___163   temp___164   temp___165   temp___166   temp___167   temp___168   temp___169   temp___170   temp___171   : int.
   (let temp___155 = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171) in (
    (if (( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (Standard__integer___axiom.dynamic_invariant temp___156 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___157 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___158 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___159 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___160 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___161 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___162 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___163 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___164 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___165 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___166 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___167 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___168 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___169 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___170 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___171 True True True True) )) then (
     (forall temp___172   : int.
      (if (( (31 <= temp___172) /\ (temp___172 <= 31) )) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 15 : Standard__integer.integer ))) else if (( (21 <= temp___172) /\ (temp___172 <= 30) )) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 6 : Standard__integer.integer )))  else if ((temp___172 = 20)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 5 : Standard__integer.integer )))  else if ((temp___172 = 19)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 4 : Standard__integer.integer )))  else if ((temp___172 = 18)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 3 : Standard__integer.integer )))  else if ((temp___172 = 17)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 2 : Standard__integer.integer )))  else if ((temp___172 = 16)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 1 : Standard__integer.integer )))  else if ((temp___172 = 15)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 0 : Standard__integer.integer )))  else if ((temp___172 = 14)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -1 : Standard__integer.integer )))  else if ((temp___172 = 13)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -2 : Standard__integer.integer )))  else if ((temp___172 = 12)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -3 : Standard__integer.integer )))  else if ((temp___172 = 11)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -4 : Standard__integer.integer )))  else if ((temp___172 = 10)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -5 : Standard__integer.integer )))  else if ((temp___172 = 9)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -6 : Standard__integer.integer )))  else if ((temp___172 = 8)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -7 : Standard__integer.integer )))  else if (( (0 <= temp___172) /\ (temp___172 <= 7) )) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -15 : Standard__integer.integer ))) else (
       true)))) else true)))
  )

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for defining the value of constant "nul" defined at a-chlat1.ads:25, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nul___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nul

 axiom nul__def_axiom :
  ((Ada__characters__latin_1__nul.nul ) = 0)

end

(* Module for defining the value of constant "soh" defined at a-chlat1.ads:26, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__soh___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__soh

 axiom soh__def_axiom :
  ((Ada__characters__latin_1__soh.soh ) = 1)

end

(* Module for defining the value of constant "stx" defined at a-chlat1.ads:27, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__stx___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__stx

 axiom stx__def_axiom :
  ((Ada__characters__latin_1__stx.stx ) = 2)

end

(* Module for defining the value of constant "etx" defined at a-chlat1.ads:28, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__etx___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__etx

 axiom etx__def_axiom :
  ((Ada__characters__latin_1__etx.etx ) = 3)

end

(* Module for defining the value of constant "eot" defined at a-chlat1.ads:29, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__eot___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__eot

 axiom eot__def_axiom :
  ((Ada__characters__latin_1__eot.eot ) = 4)

end

(* Module for defining the value of constant "enq" defined at a-chlat1.ads:30, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__enq___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__enq

 axiom enq__def_axiom :
  ((Ada__characters__latin_1__enq.enq ) = 5)

end

(* Module for defining the value of constant "ack" defined at a-chlat1.ads:31, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ack___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ack

 axiom ack__def_axiom :
  ((Ada__characters__latin_1__ack.ack ) = 6)

end

(* Module for defining the value of constant "bel" defined at a-chlat1.ads:32, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__bel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__bel

 axiom bel__def_axiom :
  ((Ada__characters__latin_1__bel.bel ) = 7)

end

(* Module for defining the value of constant "bs" defined at a-chlat1.ads:33, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__bs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__bs

 axiom bs__def_axiom :
  ((Ada__characters__latin_1__bs.bs ) = 8)

end

(* Module for defining the value of constant "ht" defined at a-chlat1.ads:34, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ht___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ht

 axiom ht__def_axiom :
  ((Ada__characters__latin_1__ht.ht ) = 9)

end

(* Module for defining the value of constant "lf" defined at a-chlat1.ads:35, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lf___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lf

 axiom lf__def_axiom :
  ((Ada__characters__latin_1__lf.lf ) = 10)

end

(* Module for defining the value of constant "vt" defined at a-chlat1.ads:36, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__vt___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__vt

 axiom vt__def_axiom :
  ((Ada__characters__latin_1__vt.vt ) = 11)

end

(* Module for defining the value of constant "ff" defined at a-chlat1.ads:37, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ff___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ff

 axiom ff__def_axiom :
  ((Ada__characters__latin_1__ff.ff ) = 12)

end

(* Module for defining the value of constant "cr" defined at a-chlat1.ads:38, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cr___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cr

 axiom cr__def_axiom :
  ((Ada__characters__latin_1__cr.cr ) = 13)

end

(* Module for defining the value of constant "so" defined at a-chlat1.ads:39, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__so___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__so

 axiom so____def_axiom :
  ((Ada__characters__latin_1__so.so__ ) = 14)

end

(* Module for defining the value of constant "si" defined at a-chlat1.ads:40, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__si___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__si

 axiom si__def_axiom :
  ((Ada__characters__latin_1__si.si ) = 15)

end

(* Module for defining the value of constant "dle" defined at a-chlat1.ads:42, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dle___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dle

 axiom dle__def_axiom :
  ((Ada__characters__latin_1__dle.dle ) = 16)

end

(* Module for defining the value of constant "dc1" defined at a-chlat1.ads:43, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc1___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc1

 axiom dc1__def_axiom :
  ((Ada__characters__latin_1__dc1.dc1 ) = 17)

end

(* Module for defining the value of constant "dc2" defined at a-chlat1.ads:44, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc2___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc2

 axiom dc2__def_axiom :
  ((Ada__characters__latin_1__dc2.dc2 ) = 18)

end

(* Module for defining the value of constant "dc3" defined at a-chlat1.ads:45, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc3___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc3

 axiom dc3__def_axiom :
  ((Ada__characters__latin_1__dc3.dc3 ) = 19)

end

(* Module for defining the value of constant "dc4" defined at a-chlat1.ads:46, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dc4___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dc4

 axiom dc4__def_axiom :
  ((Ada__characters__latin_1__dc4.dc4 ) = 20)

end

(* Module for defining the value of constant "nak" defined at a-chlat1.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nak___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nak

 axiom nak__def_axiom :
  ((Ada__characters__latin_1__nak.nak ) = 21)

end

(* Module for defining the value of constant "syn" defined at a-chlat1.ads:48, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__syn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__syn

 axiom syn__def_axiom :
  ((Ada__characters__latin_1__syn.syn ) = 22)

end

(* Module for defining the value of constant "etb" defined at a-chlat1.ads:49, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__etb___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__etb

 axiom etb__def_axiom :
  ((Ada__characters__latin_1__etb.etb ) = 23)

end

(* Module for defining the value of constant "can" defined at a-chlat1.ads:50, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__can___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__can

 axiom can__def_axiom :
  ((Ada__characters__latin_1__can.can ) = 24)

end

(* Module for defining the value of constant "em" defined at a-chlat1.ads:51, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__em___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__em

 axiom em__def_axiom :
  ((Ada__characters__latin_1__em.em ) = 25)

end

(* Module for defining the value of constant "sub" defined at a-chlat1.ads:52, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sub___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sub

 axiom sub__def_axiom :
  ((Ada__characters__latin_1__sub.sub ) = 26)

end

(* Module for defining the value of constant "esc" defined at a-chlat1.ads:53, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__esc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__esc

 axiom esc__def_axiom :
  ((Ada__characters__latin_1__esc.esc ) = 27)

end

(* Module for defining the value of constant "fs" defined at a-chlat1.ads:54, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fs

 axiom fs__def_axiom :
  ((Ada__characters__latin_1__fs.fs ) = 28)

end

(* Module for defining the value of constant "gs" defined at a-chlat1.ads:55, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__gs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__gs

 axiom gs__def_axiom :
  ((Ada__characters__latin_1__gs.gs ) = 29)

end

(* Module for defining the value of constant "rs" defined at a-chlat1.ads:56, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__rs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__rs

 axiom rs__def_axiom :
  ((Ada__characters__latin_1__rs.rs ) = 30)

end

(* Module for defining the value of constant "us" defined at a-chlat1.ads:57, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__us___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__us

 axiom us__def_axiom :
  ((Ada__characters__latin_1__us.us ) = 31)

end

(* Module for defining the value of constant "space" defined at a-chlat1.ads:63, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__space___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__space

 axiom space__def_axiom :
  ((Ada__characters__latin_1__space.space ) = 32)

end

(* Module for defining the value of constant "exclamation" defined at a-chlat1.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__exclamation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__exclamation

 axiom exclamation__def_axiom :
  ((Ada__characters__latin_1__exclamation.exclamation ) = 33)

end

(* Module for defining the value of constant "quotation" defined at a-chlat1.ads:65, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__quotation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__quotation

 axiom quotation__def_axiom :
  ((Ada__characters__latin_1__quotation.quotation ) = 34)

end

(* Module for defining the value of constant "number_sign" defined at a-chlat1.ads:66, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__number_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__number_sign

 axiom number_sign__def_axiom :
  ((Ada__characters__latin_1__number_sign.number_sign ) = 35)

end

(* Module for defining the value of constant "dollar_sign" defined at a-chlat1.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dollar_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dollar_sign

 axiom dollar_sign__def_axiom :
  ((Ada__characters__latin_1__dollar_sign.dollar_sign ) = 36)

end

(* Module for defining the value of constant "percent_sign" defined at a-chlat1.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__percent_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__percent_sign

 axiom percent_sign__def_axiom :
  ((Ada__characters__latin_1__percent_sign.percent_sign ) = 37)

end

(* Module for defining the value of constant "ampersand" defined at a-chlat1.ads:69, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ampersand___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ampersand

 axiom ampersand__def_axiom :
  ((Ada__characters__latin_1__ampersand.ampersand ) = 38)

end

(* Module for defining the value of constant "apostrophe" defined at a-chlat1.ads:70, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__apostrophe___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__apostrophe

 axiom apostrophe__def_axiom :
  ((Ada__characters__latin_1__apostrophe.apostrophe ) = 39)

end

(* Module for defining the value of constant "left_parenthesis" defined at a-chlat1.ads:71, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_parenthesis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_parenthesis

 axiom left_parenthesis__def_axiom :
  ((Ada__characters__latin_1__left_parenthesis.left_parenthesis ) = 40)

end

(* Module for defining the value of constant "right_parenthesis" defined at a-chlat1.ads:72, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_parenthesis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_parenthesis

 axiom right_parenthesis__def_axiom :
  ((Ada__characters__latin_1__right_parenthesis.right_parenthesis ) = 41)

end

(* Module for defining the value of constant "asterisk" defined at a-chlat1.ads:73, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__asterisk___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__asterisk

 axiom asterisk__def_axiom :
  ((Ada__characters__latin_1__asterisk.asterisk ) = 42)

end

(* Module for defining the value of constant "plus_sign" defined at a-chlat1.ads:74, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__plus_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__plus_sign

 axiom plus_sign__def_axiom :
  ((Ada__characters__latin_1__plus_sign.plus_sign ) = 43)

end

(* Module for defining the value of constant "comma" defined at a-chlat1.ads:75, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__comma___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__comma

 axiom comma__def_axiom :
  ((Ada__characters__latin_1__comma.comma ) = 44)

end

(* Module for defining the value of constant "hyphen" defined at a-chlat1.ads:76, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__hyphen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__hyphen

 axiom hyphen__def_axiom :
  ((Ada__characters__latin_1__hyphen.hyphen ) = 45)

end

(* Module for defining the value of constant "full_stop" defined at a-chlat1.ads:78, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__full_stop___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__full_stop

 axiom full_stop__def_axiom :
  ((Ada__characters__latin_1__full_stop.full_stop ) = 46)

end

(* Module for defining the value of constant "solidus" defined at a-chlat1.ads:79, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__solidus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__solidus

 axiom solidus__def_axiom :
  ((Ada__characters__latin_1__solidus.solidus ) = 47)

end

(* Module for defining the value of constant "colon" defined at a-chlat1.ads:83, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__colon___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__colon

 axiom colon__def_axiom :
  ((Ada__characters__latin_1__colon.colon ) = 58)

end

(* Module for defining the value of constant "semicolon" defined at a-chlat1.ads:84, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__semicolon___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__semicolon

 axiom semicolon__def_axiom :
  ((Ada__characters__latin_1__semicolon.semicolon ) = 59)

end

(* Module for defining the value of constant "less_than_sign" defined at a-chlat1.ads:85, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__less_than_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__less_than_sign

 axiom less_than_sign__def_axiom :
  ((Ada__characters__latin_1__less_than_sign.less_than_sign ) = 60)

end

(* Module for defining the value of constant "equals_sign" defined at a-chlat1.ads:86, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__equals_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__equals_sign

 axiom equals_sign__def_axiom :
  ((Ada__characters__latin_1__equals_sign.equals_sign ) = 61)

end

(* Module for defining the value of constant "greater_than_sign" defined at a-chlat1.ads:87, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__greater_than_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__greater_than_sign

 axiom greater_than_sign__def_axiom :
  ((Ada__characters__latin_1__greater_than_sign.greater_than_sign ) = 62)

end

(* Module for defining the value of constant "question" defined at a-chlat1.ads:88, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__question___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__question

 axiom question__def_axiom :
  ((Ada__characters__latin_1__question.question ) = 63)

end

(* Module for defining the value of constant "commercial_at" defined at a-chlat1.ads:89, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__commercial_at___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__commercial_at

 axiom commercial_at__def_axiom :
  ((Ada__characters__latin_1__commercial_at.commercial_at ) = 64)

end

(* Module for defining the value of constant "left_square_bracket" defined at a-chlat1.ads:93, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_square_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_square_bracket

 axiom left_square_bracket__def_axiom :
  ((Ada__characters__latin_1__left_square_bracket.left_square_bracket ) = 91)

end

(* Module for defining the value of constant "reverse_solidus" defined at a-chlat1.ads:94, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reverse_solidus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reverse_solidus

 axiom reverse_solidus__def_axiom :
  ((Ada__characters__latin_1__reverse_solidus.reverse_solidus ) = 92)

end

(* Module for defining the value of constant "right_square_bracket" defined at a-chlat1.ads:95, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_square_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_square_bracket

 axiom right_square_bracket__def_axiom :
  ((Ada__characters__latin_1__right_square_bracket.right_square_bracket ) = 93)

end

(* Module for defining the value of constant "circumflex" defined at a-chlat1.ads:96, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__circumflex

 axiom circumflex__def_axiom :
  ((Ada__characters__latin_1__circumflex.circumflex ) = 94)

end

(* Module for defining the value of constant "low_line" defined at a-chlat1.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__low_line___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__low_line

 axiom low_line__def_axiom :
  ((Ada__characters__latin_1__low_line.low_line ) = 95)

end

(* Module for defining the value of constant "grave" defined at a-chlat1.ads:99, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__grave

 axiom grave__def_axiom :
  ((Ada__characters__latin_1__grave.grave ) = 96)

end

(* Module for defining the value of constant "lc_a" defined at a-chlat1.ads:100, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a

 axiom lc_a__def_axiom :
  ((Ada__characters__latin_1__lc_a.lc_a ) = 97)

end

(* Module for defining the value of constant "lc_b" defined at a-chlat1.ads:101, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_b___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_b

 axiom lc_b__def_axiom :
  ((Ada__characters__latin_1__lc_b.lc_b ) = 98)

end

(* Module for defining the value of constant "lc_c" defined at a-chlat1.ads:102, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_c___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_c

 axiom lc_c__def_axiom :
  ((Ada__characters__latin_1__lc_c.lc_c ) = 99)

end

(* Module for defining the value of constant "lc_d" defined at a-chlat1.ads:103, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_d___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_d

 axiom lc_d__def_axiom :
  ((Ada__characters__latin_1__lc_d.lc_d ) = 100)

end

(* Module for defining the value of constant "lc_e" defined at a-chlat1.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e

 axiom lc_e__def_axiom :
  ((Ada__characters__latin_1__lc_e.lc_e ) = 101)

end

(* Module for defining the value of constant "lc_f" defined at a-chlat1.ads:105, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_f___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_f

 axiom lc_f__def_axiom :
  ((Ada__characters__latin_1__lc_f.lc_f ) = 102)

end

(* Module for defining the value of constant "lc_g" defined at a-chlat1.ads:106, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_g___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_g

 axiom lc_g__def_axiom :
  ((Ada__characters__latin_1__lc_g.lc_g ) = 103)

end

(* Module for defining the value of constant "lc_h" defined at a-chlat1.ads:107, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_h___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_h

 axiom lc_h__def_axiom :
  ((Ada__characters__latin_1__lc_h.lc_h ) = 104)

end

(* Module for defining the value of constant "lc_i" defined at a-chlat1.ads:108, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i

 axiom lc_i__def_axiom :
  ((Ada__characters__latin_1__lc_i.lc_i ) = 105)

end

(* Module for defining the value of constant "lc_j" defined at a-chlat1.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_j___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_j

 axiom lc_j__def_axiom :
  ((Ada__characters__latin_1__lc_j.lc_j ) = 106)

end

(* Module for defining the value of constant "lc_k" defined at a-chlat1.ads:110, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_k___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_k

 axiom lc_k__def_axiom :
  ((Ada__characters__latin_1__lc_k.lc_k ) = 107)

end

(* Module for defining the value of constant "lc_l" defined at a-chlat1.ads:111, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_l___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_l

 axiom lc_l__def_axiom :
  ((Ada__characters__latin_1__lc_l.lc_l ) = 108)

end

(* Module for defining the value of constant "lc_m" defined at a-chlat1.ads:112, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_m___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_m

 axiom lc_m__def_axiom :
  ((Ada__characters__latin_1__lc_m.lc_m ) = 109)

end

(* Module for defining the value of constant "lc_n" defined at a-chlat1.ads:113, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_n___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_n

 axiom lc_n__def_axiom :
  ((Ada__characters__latin_1__lc_n.lc_n ) = 110)

end

(* Module for defining the value of constant "lc_o" defined at a-chlat1.ads:114, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o

 axiom lc_o__def_axiom :
  ((Ada__characters__latin_1__lc_o.lc_o ) = 111)

end

(* Module for defining the value of constant "lc_p" defined at a-chlat1.ads:115, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_p___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_p

 axiom lc_p__def_axiom :
  ((Ada__characters__latin_1__lc_p.lc_p ) = 112)

end

(* Module for defining the value of constant "lc_q" defined at a-chlat1.ads:116, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_q___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_q

 axiom lc_q__def_axiom :
  ((Ada__characters__latin_1__lc_q.lc_q ) = 113)

end

(* Module for defining the value of constant "lc_r" defined at a-chlat1.ads:117, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_r___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_r

 axiom lc_r__def_axiom :
  ((Ada__characters__latin_1__lc_r.lc_r ) = 114)

end

(* Module for defining the value of constant "lc_s" defined at a-chlat1.ads:118, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_s___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_s

 axiom lc_s__def_axiom :
  ((Ada__characters__latin_1__lc_s.lc_s ) = 115)

end

(* Module for defining the value of constant "lc_t" defined at a-chlat1.ads:119, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_t

 axiom lc_t__def_axiom :
  ((Ada__characters__latin_1__lc_t.lc_t ) = 116)

end

(* Module for defining the value of constant "lc_u" defined at a-chlat1.ads:120, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u

 axiom lc_u__def_axiom :
  ((Ada__characters__latin_1__lc_u.lc_u ) = 117)

end

(* Module for defining the value of constant "lc_v" defined at a-chlat1.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_v___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_v

 axiom lc_v__def_axiom :
  ((Ada__characters__latin_1__lc_v.lc_v ) = 118)

end

(* Module for defining the value of constant "lc_w" defined at a-chlat1.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_w___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_w

 axiom lc_w__def_axiom :
  ((Ada__characters__latin_1__lc_w.lc_w ) = 119)

end

(* Module for defining the value of constant "lc_x" defined at a-chlat1.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_x___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_x

 axiom lc_x__def_axiom :
  ((Ada__characters__latin_1__lc_x.lc_x ) = 120)

end

(* Module for defining the value of constant "lc_y" defined at a-chlat1.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_y___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_y

 axiom lc_y__def_axiom :
  ((Ada__characters__latin_1__lc_y.lc_y ) = 121)

end

(* Module for defining the value of constant "lc_z" defined at a-chlat1.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_z___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_z

 axiom lc_z__def_axiom :
  ((Ada__characters__latin_1__lc_z.lc_z ) = 122)

end

(* Module for defining the value of constant "left_curly_bracket" defined at a-chlat1.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_curly_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_curly_bracket

 axiom left_curly_bracket__def_axiom :
  ((Ada__characters__latin_1__left_curly_bracket.left_curly_bracket ) = 123)

end

(* Module for defining the value of constant "vertical_line" defined at a-chlat1.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__vertical_line___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__vertical_line

 axiom vertical_line__def_axiom :
  ((Ada__characters__latin_1__vertical_line.vertical_line ) = 124)

end

(* Module for defining the value of constant "right_curly_bracket" defined at a-chlat1.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_curly_bracket___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_curly_bracket

 axiom right_curly_bracket__def_axiom :
  ((Ada__characters__latin_1__right_curly_bracket.right_curly_bracket ) = 125)

end

(* Module for defining the value of constant "tilde" defined at a-chlat1.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__tilde

 axiom tilde__def_axiom :
  ((Ada__characters__latin_1__tilde.tilde ) = 126)

end

(* Module for defining the value of constant "del" defined at a-chlat1.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__del___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__del

 axiom del__def_axiom :
  ((Ada__characters__latin_1__del.del ) = 127)

end

(* Module for defining the value of constant "reserved_128" defined at a-chlat1.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_128___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_128

 axiom reserved_128__def_axiom :
  ((Ada__characters__latin_1__reserved_128.reserved_128 ) = 128)

end

(* Module for defining the value of constant "reserved_129" defined at a-chlat1.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_129___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_129

 axiom reserved_129__def_axiom :
  ((Ada__characters__latin_1__reserved_129.reserved_129 ) = 129)

end

(* Module for defining the value of constant "bph" defined at a-chlat1.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__bph___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__bph

 axiom bph__def_axiom :
  ((Ada__characters__latin_1__bph.bph ) = 130)

end

(* Module for defining the value of constant "nbh" defined at a-chlat1.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nbh___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nbh

 axiom nbh__def_axiom :
  ((Ada__characters__latin_1__nbh.nbh ) = 131)

end

(* Module for defining the value of constant "reserved_132" defined at a-chlat1.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_132___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_132

 axiom reserved_132__def_axiom :
  ((Ada__characters__latin_1__reserved_132.reserved_132 ) = 132)

end

(* Module for defining the value of constant "nel" defined at a-chlat1.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__nel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__nel

 axiom nel__def_axiom :
  ((Ada__characters__latin_1__nel.nel ) = 133)

end

(* Module for defining the value of constant "ssa" defined at a-chlat1.ads:147, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ssa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ssa

 axiom ssa__def_axiom :
  ((Ada__characters__latin_1__ssa.ssa ) = 134)

end

(* Module for defining the value of constant "esa" defined at a-chlat1.ads:148, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__esa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__esa

 axiom esa__def_axiom :
  ((Ada__characters__latin_1__esa.esa ) = 135)

end

(* Module for defining the value of constant "hts" defined at a-chlat1.ads:149, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__hts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__hts

 axiom hts__def_axiom :
  ((Ada__characters__latin_1__hts.hts ) = 136)

end

(* Module for defining the value of constant "htj" defined at a-chlat1.ads:150, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__htj___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__htj

 axiom htj__def_axiom :
  ((Ada__characters__latin_1__htj.htj ) = 137)

end

(* Module for defining the value of constant "vts" defined at a-chlat1.ads:151, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__vts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__vts

 axiom vts__def_axiom :
  ((Ada__characters__latin_1__vts.vts ) = 138)

end

(* Module for defining the value of constant "pld" defined at a-chlat1.ads:152, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pld___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pld

 axiom pld__def_axiom :
  ((Ada__characters__latin_1__pld.pld ) = 139)

end

(* Module for defining the value of constant "plu" defined at a-chlat1.ads:153, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__plu___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__plu

 axiom plu__def_axiom :
  ((Ada__characters__latin_1__plu.plu ) = 140)

end

(* Module for defining the value of constant "ri" defined at a-chlat1.ads:154, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ri___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ri

 axiom ri__def_axiom :
  ((Ada__characters__latin_1__ri.ri ) = 141)

end

(* Module for defining the value of constant "ss2" defined at a-chlat1.ads:155, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ss2___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ss2

 axiom ss2__def_axiom :
  ((Ada__characters__latin_1__ss2.ss2 ) = 142)

end

(* Module for defining the value of constant "ss3" defined at a-chlat1.ads:156, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__ss3___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__ss3

 axiom ss3__def_axiom :
  ((Ada__characters__latin_1__ss3.ss3 ) = 143)

end

(* Module for defining the value of constant "dcs" defined at a-chlat1.ads:158, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__dcs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__dcs

 axiom dcs__def_axiom :
  ((Ada__characters__latin_1__dcs.dcs ) = 144)

end

(* Module for defining the value of constant "pu1" defined at a-chlat1.ads:159, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pu1___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pu1

 axiom pu1__def_axiom :
  ((Ada__characters__latin_1__pu1.pu1 ) = 145)

end

(* Module for defining the value of constant "pu2" defined at a-chlat1.ads:160, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pu2___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pu2

 axiom pu2__def_axiom :
  ((Ada__characters__latin_1__pu2.pu2 ) = 146)

end

(* Module for defining the value of constant "sts" defined at a-chlat1.ads:161, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sts

 axiom sts__def_axiom :
  ((Ada__characters__latin_1__sts.sts ) = 147)

end

(* Module for defining the value of constant "cch" defined at a-chlat1.ads:162, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cch___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cch

 axiom cch__def_axiom :
  ((Ada__characters__latin_1__cch.cch ) = 148)

end

(* Module for defining the value of constant "mw" defined at a-chlat1.ads:163, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__mw___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__mw

 axiom mw__def_axiom :
  ((Ada__characters__latin_1__mw.mw ) = 149)

end

(* Module for defining the value of constant "spa" defined at a-chlat1.ads:164, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__spa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__spa

 axiom spa__def_axiom :
  ((Ada__characters__latin_1__spa.spa ) = 150)

end

(* Module for defining the value of constant "epa" defined at a-chlat1.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__epa___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__epa

 axiom epa__def_axiom :
  ((Ada__characters__latin_1__epa.epa ) = 151)

end

(* Module for defining the value of constant "sos" defined at a-chlat1.ads:167, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sos___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sos

 axiom sos__def_axiom :
  ((Ada__characters__latin_1__sos.sos ) = 152)

end

(* Module for defining the value of constant "reserved_153" defined at a-chlat1.ads:168, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__reserved_153___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__reserved_153

 axiom reserved_153__def_axiom :
  ((Ada__characters__latin_1__reserved_153.reserved_153 ) = 153)

end

(* Module for defining the value of constant "sci" defined at a-chlat1.ads:169, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__sci___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__sci

 axiom sci__def_axiom :
  ((Ada__characters__latin_1__sci.sci ) = 154)

end

(* Module for defining the value of constant "csi" defined at a-chlat1.ads:170, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__csi___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__csi

 axiom csi__def_axiom :
  ((Ada__characters__latin_1__csi.csi ) = 155)

end

(* Module for defining the value of constant "st" defined at a-chlat1.ads:171, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__st___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__st

 axiom st__def_axiom :
  ((Ada__characters__latin_1__st.st ) = 156)

end

(* Module for defining the value of constant "osc" defined at a-chlat1.ads:172, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__osc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__osc

 axiom osc__def_axiom :
  ((Ada__characters__latin_1__osc.osc ) = 157)

end

(* Module for defining the value of constant "pm" defined at a-chlat1.ads:173, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pm

 axiom pm__def_axiom :
  ((Ada__characters__latin_1__pm.pm ) = 158)

end

(* Module for defining the value of constant "apc" defined at a-chlat1.ads:174, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__apc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__apc

 axiom apc__def_axiom :
  ((Ada__characters__latin_1__apc.apc ) = 159)

end

(* Module for defining the value of constant "no_break_space" defined at a-chlat1.ads:182, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__no_break_space___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__no_break_space

 axiom no_break_space__def_axiom :
  ((Ada__characters__latin_1__no_break_space.no_break_space ) = 160)

end

(* Module for defining the value of constant "inverted_exclamation" defined at a-chlat1.ads:184, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__inverted_exclamation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__inverted_exclamation

 axiom inverted_exclamation__def_axiom :
  ((Ada__characters__latin_1__inverted_exclamation.inverted_exclamation ) = 161)

end

(* Module for defining the value of constant "cent_sign" defined at a-chlat1.ads:185, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cent_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cent_sign

 axiom cent_sign__def_axiom :
  ((Ada__characters__latin_1__cent_sign.cent_sign ) = 162)

end

(* Module for defining the value of constant "pound_sign" defined at a-chlat1.ads:186, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pound_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pound_sign

 axiom pound_sign__def_axiom :
  ((Ada__characters__latin_1__pound_sign.pound_sign ) = 163)

end

(* Module for defining the value of constant "currency_sign" defined at a-chlat1.ads:187, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__currency_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__currency_sign

 axiom currency_sign__def_axiom :
  ((Ada__characters__latin_1__currency_sign.currency_sign ) = 164)

end

(* Module for defining the value of constant "yen_sign" defined at a-chlat1.ads:188, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__yen_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__yen_sign

 axiom yen_sign__def_axiom :
  ((Ada__characters__latin_1__yen_sign.yen_sign ) = 165)

end

(* Module for defining the value of constant "broken_bar" defined at a-chlat1.ads:189, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__broken_bar___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__broken_bar

 axiom broken_bar__def_axiom :
  ((Ada__characters__latin_1__broken_bar.broken_bar ) = 166)

end

(* Module for defining the value of constant "section_sign" defined at a-chlat1.ads:190, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__section_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__section_sign

 axiom section_sign__def_axiom :
  ((Ada__characters__latin_1__section_sign.section_sign ) = 167)

end

(* Module for defining the value of constant "diaeresis" defined at a-chlat1.ads:191, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__diaeresis

 axiom diaeresis__def_axiom :
  ((Ada__characters__latin_1__diaeresis.diaeresis ) = 168)

end

(* Module for defining the value of constant "copyright_sign" defined at a-chlat1.ads:192, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__copyright_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__copyright_sign

 axiom copyright_sign__def_axiom :
  ((Ada__characters__latin_1__copyright_sign.copyright_sign ) = 169)

end

(* Module for defining the value of constant "feminine_ordinal_indicator" defined at a-chlat1.ads:193, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__feminine_ordinal_indicator___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__feminine_ordinal_indicator

 axiom feminine_ordinal_indicator__def_axiom :
  ((Ada__characters__latin_1__feminine_ordinal_indicator.feminine_ordinal_indicator ) = 170)

end

(* Module for defining the value of constant "left_angle_quotation" defined at a-chlat1.ads:194, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__left_angle_quotation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__left_angle_quotation

 axiom left_angle_quotation__def_axiom :
  ((Ada__characters__latin_1__left_angle_quotation.left_angle_quotation ) = 171)

end

(* Module for defining the value of constant "not_sign" defined at a-chlat1.ads:195, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__not_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__not_sign

 axiom not_sign__def_axiom :
  ((Ada__characters__latin_1__not_sign.not_sign ) = 172)

end

(* Module for defining the value of constant "soft_hyphen" defined at a-chlat1.ads:196, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__soft_hyphen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__soft_hyphen

 axiom soft_hyphen__def_axiom :
  ((Ada__characters__latin_1__soft_hyphen.soft_hyphen ) = 173)

end

(* Module for defining the value of constant "registered_trade_mark_sign" defined at a-chlat1.ads:197, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__registered_trade_mark_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__registered_trade_mark_sign

 axiom registered_trade_mark_sign__def_axiom :
  ((Ada__characters__latin_1__registered_trade_mark_sign.registered_trade_mark_sign ) = 174)

end

(* Module for defining the value of constant "macron" defined at a-chlat1.ads:198, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__macron___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__macron

 axiom macron__def_axiom :
  ((Ada__characters__latin_1__macron.macron ) = 175)

end

(* Module for defining the value of constant "degree_sign" defined at a-chlat1.ads:202, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__degree_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__degree_sign

 axiom degree_sign__def_axiom :
  ((Ada__characters__latin_1__degree_sign.degree_sign ) = 176)

end

(* Module for defining the value of constant "plus_minus_sign" defined at a-chlat1.ads:204, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__plus_minus_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__plus_minus_sign

 axiom plus_minus_sign__def_axiom :
  ((Ada__characters__latin_1__plus_minus_sign.plus_minus_sign ) = 177)

end

(* Module for defining the value of constant "superscript_two" defined at a-chlat1.ads:205, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__superscript_two___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__superscript_two

 axiom superscript_two__def_axiom :
  ((Ada__characters__latin_1__superscript_two.superscript_two ) = 178)

end

(* Module for defining the value of constant "superscript_three" defined at a-chlat1.ads:206, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__superscript_three___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__superscript_three

 axiom superscript_three__def_axiom :
  ((Ada__characters__latin_1__superscript_three.superscript_three ) = 179)

end

(* Module for defining the value of constant "acute" defined at a-chlat1.ads:207, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__acute

 axiom acute__def_axiom :
  ((Ada__characters__latin_1__acute.acute ) = 180)

end

(* Module for defining the value of constant "micro_sign" defined at a-chlat1.ads:208, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__micro_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__micro_sign

 axiom micro_sign__def_axiom :
  ((Ada__characters__latin_1__micro_sign.micro_sign ) = 181)

end

(* Module for defining the value of constant "pilcrow_sign" defined at a-chlat1.ads:209, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__pilcrow_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__pilcrow_sign

 axiom pilcrow_sign__def_axiom :
  ((Ada__characters__latin_1__pilcrow_sign.pilcrow_sign ) = 182)

end

(* Module for defining the value of constant "middle_dot" defined at a-chlat1.ads:211, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__middle_dot___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__middle_dot

 axiom middle_dot__def_axiom :
  ((Ada__characters__latin_1__middle_dot.middle_dot ) = 183)

end

(* Module for defining the value of constant "cedilla" defined at a-chlat1.ads:212, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__cedilla___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__cedilla

 axiom cedilla__def_axiom :
  ((Ada__characters__latin_1__cedilla.cedilla ) = 184)

end

(* Module for defining the value of constant "superscript_one" defined at a-chlat1.ads:213, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__superscript_one___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__superscript_one

 axiom superscript_one__def_axiom :
  ((Ada__characters__latin_1__superscript_one.superscript_one ) = 185)

end

(* Module for defining the value of constant "masculine_ordinal_indicator" defined at a-chlat1.ads:214, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__masculine_ordinal_indicator___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__masculine_ordinal_indicator

 axiom masculine_ordinal_indicator__def_axiom :
  ((Ada__characters__latin_1__masculine_ordinal_indicator.masculine_ordinal_indicator ) = 186)

end

(* Module for defining the value of constant "right_angle_quotation" defined at a-chlat1.ads:215, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__right_angle_quotation___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__right_angle_quotation

 axiom right_angle_quotation__def_axiom :
  ((Ada__characters__latin_1__right_angle_quotation.right_angle_quotation ) = 187)

end

(* Module for defining the value of constant "fraction_one_quarter" defined at a-chlat1.ads:216, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fraction_one_quarter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fraction_one_quarter

 axiom fraction_one_quarter__def_axiom :
  ((Ada__characters__latin_1__fraction_one_quarter.fraction_one_quarter ) = 188)

end

(* Module for defining the value of constant "fraction_one_half" defined at a-chlat1.ads:217, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fraction_one_half___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fraction_one_half

 axiom fraction_one_half__def_axiom :
  ((Ada__characters__latin_1__fraction_one_half.fraction_one_half ) = 189)

end

(* Module for defining the value of constant "fraction_three_quarters" defined at a-chlat1.ads:218, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__fraction_three_quarters___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__fraction_three_quarters

 axiom fraction_three_quarters__def_axiom :
  ((Ada__characters__latin_1__fraction_three_quarters.fraction_three_quarters ) = 190)

end

(* Module for defining the value of constant "inverted_question" defined at a-chlat1.ads:219, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__inverted_question___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__inverted_question

 axiom inverted_question__def_axiom :
  ((Ada__characters__latin_1__inverted_question.inverted_question ) = 191)

end

(* Module for defining the value of constant "uc_a_grave" defined at a-chlat1.ads:223, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_grave

 axiom uc_a_grave__def_axiom :
  ((Ada__characters__latin_1__uc_a_grave.uc_a_grave ) = 192)

end

(* Module for defining the value of constant "uc_a_acute" defined at a-chlat1.ads:224, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_acute

 axiom uc_a_acute__def_axiom :
  ((Ada__characters__latin_1__uc_a_acute.uc_a_acute ) = 193)

end

(* Module for defining the value of constant "uc_a_circumflex" defined at a-chlat1.ads:225, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_circumflex

 axiom uc_a_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_a_circumflex.uc_a_circumflex ) = 194)

end

(* Module for defining the value of constant "uc_a_tilde" defined at a-chlat1.ads:226, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_tilde

 axiom uc_a_tilde__def_axiom :
  ((Ada__characters__latin_1__uc_a_tilde.uc_a_tilde ) = 195)

end

(* Module for defining the value of constant "uc_a_diaeresis" defined at a-chlat1.ads:227, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_diaeresis

 axiom uc_a_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_a_diaeresis.uc_a_diaeresis ) = 196)

end

(* Module for defining the value of constant "uc_a_ring" defined at a-chlat1.ads:228, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_a_ring___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_a_ring

 axiom uc_a_ring__def_axiom :
  ((Ada__characters__latin_1__uc_a_ring.uc_a_ring ) = 197)

end

(* Module for defining the value of constant "uc_ae_diphthong" defined at a-chlat1.ads:229, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_ae_diphthong___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_ae_diphthong

 axiom uc_ae_diphthong__def_axiom :
  ((Ada__characters__latin_1__uc_ae_diphthong.uc_ae_diphthong ) = 198)

end

(* Module for defining the value of constant "uc_c_cedilla" defined at a-chlat1.ads:230, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_c_cedilla___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_c_cedilla

 axiom uc_c_cedilla__def_axiom :
  ((Ada__characters__latin_1__uc_c_cedilla.uc_c_cedilla ) = 199)

end

(* Module for defining the value of constant "uc_e_grave" defined at a-chlat1.ads:231, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_grave

 axiom uc_e_grave__def_axiom :
  ((Ada__characters__latin_1__uc_e_grave.uc_e_grave ) = 200)

end

(* Module for defining the value of constant "uc_e_acute" defined at a-chlat1.ads:232, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_acute

 axiom uc_e_acute__def_axiom :
  ((Ada__characters__latin_1__uc_e_acute.uc_e_acute ) = 201)

end

(* Module for defining the value of constant "uc_e_circumflex" defined at a-chlat1.ads:233, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_circumflex

 axiom uc_e_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_e_circumflex.uc_e_circumflex ) = 202)

end

(* Module for defining the value of constant "uc_e_diaeresis" defined at a-chlat1.ads:234, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_e_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_e_diaeresis

 axiom uc_e_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_e_diaeresis.uc_e_diaeresis ) = 203)

end

(* Module for defining the value of constant "uc_i_grave" defined at a-chlat1.ads:235, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_grave

 axiom uc_i_grave__def_axiom :
  ((Ada__characters__latin_1__uc_i_grave.uc_i_grave ) = 204)

end

(* Module for defining the value of constant "uc_i_acute" defined at a-chlat1.ads:236, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_acute

 axiom uc_i_acute__def_axiom :
  ((Ada__characters__latin_1__uc_i_acute.uc_i_acute ) = 205)

end

(* Module for defining the value of constant "uc_i_circumflex" defined at a-chlat1.ads:237, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_circumflex

 axiom uc_i_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_i_circumflex.uc_i_circumflex ) = 206)

end

(* Module for defining the value of constant "uc_i_diaeresis" defined at a-chlat1.ads:238, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_i_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_i_diaeresis

 axiom uc_i_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_i_diaeresis.uc_i_diaeresis ) = 207)

end

(* Module for defining the value of constant "uc_icelandic_eth" defined at a-chlat1.ads:242, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_icelandic_eth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_icelandic_eth

 axiom uc_icelandic_eth__def_axiom :
  ((Ada__characters__latin_1__uc_icelandic_eth.uc_icelandic_eth ) = 208)

end

(* Module for defining the value of constant "uc_n_tilde" defined at a-chlat1.ads:243, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_n_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_n_tilde

 axiom uc_n_tilde__def_axiom :
  ((Ada__characters__latin_1__uc_n_tilde.uc_n_tilde ) = 209)

end

(* Module for defining the value of constant "uc_o_grave" defined at a-chlat1.ads:244, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_grave

 axiom uc_o_grave__def_axiom :
  ((Ada__characters__latin_1__uc_o_grave.uc_o_grave ) = 210)

end

(* Module for defining the value of constant "uc_o_acute" defined at a-chlat1.ads:245, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_acute

 axiom uc_o_acute__def_axiom :
  ((Ada__characters__latin_1__uc_o_acute.uc_o_acute ) = 211)

end

(* Module for defining the value of constant "uc_o_circumflex" defined at a-chlat1.ads:246, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_circumflex

 axiom uc_o_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_o_circumflex.uc_o_circumflex ) = 212)

end

(* Module for defining the value of constant "uc_o_tilde" defined at a-chlat1.ads:247, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_tilde

 axiom uc_o_tilde__def_axiom :
  ((Ada__characters__latin_1__uc_o_tilde.uc_o_tilde ) = 213)

end

(* Module for defining the value of constant "uc_o_diaeresis" defined at a-chlat1.ads:248, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_diaeresis

 axiom uc_o_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_o_diaeresis.uc_o_diaeresis ) = 214)

end

(* Module for defining the value of constant "multiplication_sign" defined at a-chlat1.ads:249, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__multiplication_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__multiplication_sign

 axiom multiplication_sign__def_axiom :
  ((Ada__characters__latin_1__multiplication_sign.multiplication_sign ) = 215)

end

(* Module for defining the value of constant "uc_o_oblique_stroke" defined at a-chlat1.ads:250, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_o_oblique_stroke___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_o_oblique_stroke

 axiom uc_o_oblique_stroke__def_axiom :
  ((Ada__characters__latin_1__uc_o_oblique_stroke.uc_o_oblique_stroke ) = 216)

end

(* Module for defining the value of constant "uc_u_grave" defined at a-chlat1.ads:251, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_grave

 axiom uc_u_grave__def_axiom :
  ((Ada__characters__latin_1__uc_u_grave.uc_u_grave ) = 217)

end

(* Module for defining the value of constant "uc_u_acute" defined at a-chlat1.ads:252, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_acute

 axiom uc_u_acute__def_axiom :
  ((Ada__characters__latin_1__uc_u_acute.uc_u_acute ) = 218)

end

(* Module for defining the value of constant "uc_u_circumflex" defined at a-chlat1.ads:253, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_circumflex

 axiom uc_u_circumflex__def_axiom :
  ((Ada__characters__latin_1__uc_u_circumflex.uc_u_circumflex ) = 219)

end

(* Module for defining the value of constant "uc_u_diaeresis" defined at a-chlat1.ads:254, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_u_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_u_diaeresis

 axiom uc_u_diaeresis__def_axiom :
  ((Ada__characters__latin_1__uc_u_diaeresis.uc_u_diaeresis ) = 220)

end

(* Module for defining the value of constant "uc_y_acute" defined at a-chlat1.ads:255, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_y_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_y_acute

 axiom uc_y_acute__def_axiom :
  ((Ada__characters__latin_1__uc_y_acute.uc_y_acute ) = 221)

end

(* Module for defining the value of constant "uc_icelandic_thorn" defined at a-chlat1.ads:256, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__uc_icelandic_thorn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__uc_icelandic_thorn

 axiom uc_icelandic_thorn__def_axiom :
  ((Ada__characters__latin_1__uc_icelandic_thorn.uc_icelandic_thorn ) = 222)

end

(* Module for defining the value of constant "lc_german_sharp_s" defined at a-chlat1.ads:257, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_german_sharp_s___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_german_sharp_s

 axiom lc_german_sharp_s__def_axiom :
  ((Ada__characters__latin_1__lc_german_sharp_s.lc_german_sharp_s ) = 223)

end

(* Module for defining the value of constant "lc_a_grave" defined at a-chlat1.ads:261, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_grave

 axiom lc_a_grave__def_axiom :
  ((Ada__characters__latin_1__lc_a_grave.lc_a_grave ) = 224)

end

(* Module for defining the value of constant "lc_a_acute" defined at a-chlat1.ads:262, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_acute

 axiom lc_a_acute__def_axiom :
  ((Ada__characters__latin_1__lc_a_acute.lc_a_acute ) = 225)

end

(* Module for defining the value of constant "lc_a_circumflex" defined at a-chlat1.ads:263, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_circumflex

 axiom lc_a_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_a_circumflex.lc_a_circumflex ) = 226)

end

(* Module for defining the value of constant "lc_a_tilde" defined at a-chlat1.ads:264, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_tilde

 axiom lc_a_tilde__def_axiom :
  ((Ada__characters__latin_1__lc_a_tilde.lc_a_tilde ) = 227)

end

(* Module for defining the value of constant "lc_a_diaeresis" defined at a-chlat1.ads:265, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_diaeresis

 axiom lc_a_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_a_diaeresis.lc_a_diaeresis ) = 228)

end

(* Module for defining the value of constant "lc_a_ring" defined at a-chlat1.ads:266, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_a_ring___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_a_ring

 axiom lc_a_ring__def_axiom :
  ((Ada__characters__latin_1__lc_a_ring.lc_a_ring ) = 229)

end

(* Module for defining the value of constant "lc_ae_diphthong" defined at a-chlat1.ads:267, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_ae_diphthong___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_ae_diphthong

 axiom lc_ae_diphthong__def_axiom :
  ((Ada__characters__latin_1__lc_ae_diphthong.lc_ae_diphthong ) = 230)

end

(* Module for defining the value of constant "lc_c_cedilla" defined at a-chlat1.ads:268, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_c_cedilla___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_c_cedilla

 axiom lc_c_cedilla__def_axiom :
  ((Ada__characters__latin_1__lc_c_cedilla.lc_c_cedilla ) = 231)

end

(* Module for defining the value of constant "lc_e_grave" defined at a-chlat1.ads:269, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_grave

 axiom lc_e_grave__def_axiom :
  ((Ada__characters__latin_1__lc_e_grave.lc_e_grave ) = 232)

end

(* Module for defining the value of constant "lc_e_acute" defined at a-chlat1.ads:270, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_acute

 axiom lc_e_acute__def_axiom :
  ((Ada__characters__latin_1__lc_e_acute.lc_e_acute ) = 233)

end

(* Module for defining the value of constant "lc_e_circumflex" defined at a-chlat1.ads:271, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_circumflex

 axiom lc_e_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_e_circumflex.lc_e_circumflex ) = 234)

end

(* Module for defining the value of constant "lc_e_diaeresis" defined at a-chlat1.ads:272, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_e_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_e_diaeresis

 axiom lc_e_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_e_diaeresis.lc_e_diaeresis ) = 235)

end

(* Module for defining the value of constant "lc_i_grave" defined at a-chlat1.ads:273, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_grave

 axiom lc_i_grave__def_axiom :
  ((Ada__characters__latin_1__lc_i_grave.lc_i_grave ) = 236)

end

(* Module for defining the value of constant "lc_i_acute" defined at a-chlat1.ads:274, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_acute

 axiom lc_i_acute__def_axiom :
  ((Ada__characters__latin_1__lc_i_acute.lc_i_acute ) = 237)

end

(* Module for defining the value of constant "lc_i_circumflex" defined at a-chlat1.ads:275, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_circumflex

 axiom lc_i_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_i_circumflex.lc_i_circumflex ) = 238)

end

(* Module for defining the value of constant "lc_i_diaeresis" defined at a-chlat1.ads:276, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_i_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_i_diaeresis

 axiom lc_i_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_i_diaeresis.lc_i_diaeresis ) = 239)

end

(* Module for defining the value of constant "lc_icelandic_eth" defined at a-chlat1.ads:279, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_icelandic_eth___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_icelandic_eth

 axiom lc_icelandic_eth__def_axiom :
  ((Ada__characters__latin_1__lc_icelandic_eth.lc_icelandic_eth ) = 240)

end

(* Module for defining the value of constant "lc_n_tilde" defined at a-chlat1.ads:280, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_n_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_n_tilde

 axiom lc_n_tilde__def_axiom :
  ((Ada__characters__latin_1__lc_n_tilde.lc_n_tilde ) = 241)

end

(* Module for defining the value of constant "lc_o_grave" defined at a-chlat1.ads:281, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_grave

 axiom lc_o_grave__def_axiom :
  ((Ada__characters__latin_1__lc_o_grave.lc_o_grave ) = 242)

end

(* Module for defining the value of constant "lc_o_acute" defined at a-chlat1.ads:282, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_acute

 axiom lc_o_acute__def_axiom :
  ((Ada__characters__latin_1__lc_o_acute.lc_o_acute ) = 243)

end

(* Module for defining the value of constant "lc_o_circumflex" defined at a-chlat1.ads:283, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_circumflex

 axiom lc_o_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_o_circumflex.lc_o_circumflex ) = 244)

end

(* Module for defining the value of constant "lc_o_tilde" defined at a-chlat1.ads:284, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_tilde___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_tilde

 axiom lc_o_tilde__def_axiom :
  ((Ada__characters__latin_1__lc_o_tilde.lc_o_tilde ) = 245)

end

(* Module for defining the value of constant "lc_o_diaeresis" defined at a-chlat1.ads:285, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_diaeresis

 axiom lc_o_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_o_diaeresis.lc_o_diaeresis ) = 246)

end

(* Module for defining the value of constant "division_sign" defined at a-chlat1.ads:286, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__division_sign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__division_sign

 axiom division_sign__def_axiom :
  ((Ada__characters__latin_1__division_sign.division_sign ) = 247)

end

(* Module for defining the value of constant "lc_o_oblique_stroke" defined at a-chlat1.ads:287, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_o_oblique_stroke___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_o_oblique_stroke

 axiom lc_o_oblique_stroke__def_axiom :
  ((Ada__characters__latin_1__lc_o_oblique_stroke.lc_o_oblique_stroke ) = 248)

end

(* Module for defining the value of constant "lc_u_grave" defined at a-chlat1.ads:288, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_grave___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_grave

 axiom lc_u_grave__def_axiom :
  ((Ada__characters__latin_1__lc_u_grave.lc_u_grave ) = 249)

end

(* Module for defining the value of constant "lc_u_acute" defined at a-chlat1.ads:289, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_acute

 axiom lc_u_acute__def_axiom :
  ((Ada__characters__latin_1__lc_u_acute.lc_u_acute ) = 250)

end

(* Module for defining the value of constant "lc_u_circumflex" defined at a-chlat1.ads:290, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_circumflex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_circumflex

 axiom lc_u_circumflex__def_axiom :
  ((Ada__characters__latin_1__lc_u_circumflex.lc_u_circumflex ) = 251)

end

(* Module for defining the value of constant "lc_u_diaeresis" defined at a-chlat1.ads:291, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_u_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_u_diaeresis

 axiom lc_u_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_u_diaeresis.lc_u_diaeresis ) = 252)

end

(* Module for defining the value of constant "lc_y_acute" defined at a-chlat1.ads:292, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_y_acute___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_y_acute

 axiom lc_y_acute__def_axiom :
  ((Ada__characters__latin_1__lc_y_acute.lc_y_acute ) = 253)

end

(* Module for defining the value of constant "lc_icelandic_thorn" defined at a-chlat1.ads:293, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_icelandic_thorn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_icelandic_thorn

 axiom lc_icelandic_thorn__def_axiom :
  ((Ada__characters__latin_1__lc_icelandic_thorn.lc_icelandic_thorn ) = 254)

end

(* Module for defining the value of constant "lc_y_diaeresis" defined at a-chlat1.ads:294, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__characters__latin_1__lc_y_diaeresis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__characters__latin_1__lc_y_diaeresis

 axiom lc_y_diaeresis__def_axiom :
  ((Ada__characters__latin_1__lc_y_diaeresis.lc_y_diaeresis ) = 255)

end

(* Module for defining the value of constant "num_regs" defined at instruction.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Instruction__num_regs___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__num_regs

 axiom num_regs__def_axiom :
  ((Instruction__num_regs.num_regs ) = 32)

end

(* Module for defining the value of constant "memory_size" defined at instruction.ads:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Instruction__memory_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Instruction__memory_size

 axiom memory_size__def_axiom :
  ((Instruction__memory_size.memory_size ) = 65536)

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at debug.ads:4, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at debug.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put_line___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put_line 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at debug.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put__2___axiom
 use import "_gnatprove_standard".Main

 val put__2 
   (item : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_line" defined at debug.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__new_line___axiom
 use import "_gnatprove_standard".Main

 val new_line 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at debug.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Debug__put__3___axiom
 use import "_gnatprove_standard".Main

 val put__3 
   (item : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Olt
 use        System__address___axiom

 val olt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Olt.olt left right)) /\ true ) /\ true ) }
 
 axiom olt__post_axiom :
  (forall left   right   : BV64.t [(System__Olt.olt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Olt.olt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ole
 use        System__address___axiom

 val ole 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ole.ole left right)) /\ true ) /\ true ) }
 
 axiom ole__post_axiom :
  (forall left   right   : BV64.t [(System__Ole.ole left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ole.ole left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ogt
 use        System__address___axiom

 val ogt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ogt.ogt left right)) /\ true ) /\ true ) }
 
 axiom ogt__post_axiom :
  (forall left   right   : BV64.t [(System__Ogt.ogt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ogt.ogt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oge
 use        System__address___axiom

 val oge 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oge.oge left right)) /\ true ) /\ true ) }
 
 axiom oge__post_axiom :
  (forall left   right   : BV64.t [(System__Oge.oge left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oge.oge left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oeq
 use        System__address___axiom

 val oeq 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oeq.oeq left right)) /\ true ) /\ true ) }
 
 axiom oeq__post_axiom :
  (forall left   right   : BV64.t [(System__Oeq.oeq left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oeq.oeq left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at instruction.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__init___axiom
 use import "_gnatprove_standard".Main

 val init 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "generaterandominstr" defined at instruction.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__generaterandominstr___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__instr
 use        Instruction__instr___axiom

 val generaterandominstr 
   (inst__split_fields : Instruction__instr.__split_fields__ref) (inst__split_discrs : Instruction__instr.__split_discrs__ref) (inst__attr__constrained : bool) : unit
  requires {  true }
  ensures {  (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = inst__attr__constrained } True True True True) }
  writes {inst__split_fields, inst__split_discrs}

end

(* Module for declaring a program function (and possibly an axiom) for "debugprintinstr" defined at instruction.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__debugprintinstr___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__instr

 val debugprintinstr 
   (inst : Instruction__instr.instr) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_seed" defined at s-ransee.ads:46, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__random_seed__get_seed___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__random_seed__get_seed
 use        Interfaces__unsigned_64___axiom

 val get_seed 
   (__void_param : unit) : BV64.t
  requires {  true }
  ensures {  ( ( (result = (System__random_seed__get_seed.get_seed ())) /\ true ) /\ (Interfaces__unsigned_64___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_seed__post_axiom :
  (forall __void_param   : unit [(System__random_seed__get_seed.get_seed __void_param)].
   ( true -> (let result = (System__random_seed__get_seed.get_seed __void_param) in (
    ( ( true /\ (Interfaces__unsigned_64___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "random" defined at a-nudira.ads:52 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__random___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__random
 use        Instruction__random_opcode__result_subtype___axiom
 use        Instruction__random_opcode__generator
 use        Instruction__random_opcode__generator___axiom

 val random 
   (gen : Instruction__random_opcode__generator.generator) : int
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_opcode__random.random gen)) /\ true ) /\ (Instruction__random_opcode__result_subtype___axiom.dynamic_invariant result True False True True) ) }
 
 axiom random__post_axiom :
  (forall gen   : Instruction__random_opcode__generator.generator [(Instruction__random_opcode__random.random gen)].
   ( (Instruction__random_opcode__generator___axiom.dynamic_invariant gen True True True True) -> (let result = (Instruction__random_opcode__random.random gen) in (
    ( ( true /\ (Instruction__random_opcode__result_subtype___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "reset" defined at a-nudira.ads:54 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__reset___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 val reset 
   (gen : Instruction__random_opcode__generator.generator) (initiator : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at a-nudira.ads:55 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__reset__2___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__generator

 val reset__2 
   (gen : Instruction__random_opcode__generator.generator) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "save" defined at a-nudira.ads:61 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__save___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__state
 use        Instruction__random_opcode__generator
 use        Instruction__random_opcode__state___axiom

 val save 
   (gen : Instruction__random_opcode__generator.generator) (to_state : Instruction__random_opcode__state.state__ref) : unit
  requires {  true }
  ensures {  (Instruction__random_opcode__state___axiom.dynamic_invariant to_state.Instruction__random_opcode__state.state__content True True True True) }
  writes {to_state}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__3" defined at a-nudira.ads:62 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__reset__3___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_opcode__state
 use        Instruction__random_opcode__generator

 val reset__3 
   (gen : Instruction__random_opcode__generator.generator) (from_state : Instruction__random_opcode__state.state) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "image" defined at a-nudira.ads:66 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__image___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Instruction__random_opcode__image
 use        Instruction__random_opcode__state
 use        Instruction__random_opcode__state___axiom

 val image 
   (of_state : Instruction__random_opcode__state.state) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_opcode__image.image of_state)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom image__post_axiom :
  (forall of_state   : Instruction__random_opcode__state.state [(Instruction__random_opcode__image.image of_state)].
   ( (Instruction__random_opcode__state___axiom.dynamic_invariant of_state True True True True) -> (let result = (Instruction__random_opcode__image.image of_state) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "value" defined at a-nudira.ads:67 instantiated at instruction.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_opcode__value___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Instruction__random_opcode__state
 use        Instruction__random_opcode__value
 use        Instruction__random_opcode__state___axiom

 val value 
   (coded_state : Standard__string.string) : Instruction__random_opcode__state.state
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_opcode__value.value coded_state)) /\ true ) /\ (Instruction__random_opcode__state___axiom.dynamic_invariant result True False True True) ) }
 
 axiom value__post_axiom :
  (forall coded_state   : Standard__string.string [(Instruction__random_opcode__value.value coded_state)].
   ( (Standard__string___axiom.dynamic_invariant coded_state True True True True) -> (let result = (Instruction__random_opcode__value.value coded_state) in (
    ( ( true /\ (Instruction__random_opcode__state___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "random" defined at a-nudira.ads:52 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__random___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__random
 use        Instruction__random_reg__result_subtype___axiom
 use        Instruction__random_reg__generator
 use        Instruction__random_reg__generator___axiom

 val random 
   (gen : Instruction__random_reg__generator.generator) : int
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_reg__random.random gen)) /\ true ) /\ (Instruction__random_reg__result_subtype___axiom.dynamic_invariant result True False True True) ) }
 
 axiom random__post_axiom :
  (forall gen   : Instruction__random_reg__generator.generator [(Instruction__random_reg__random.random gen)].
   ( (Instruction__random_reg__generator___axiom.dynamic_invariant gen True True True True) -> (let result = (Instruction__random_reg__random.random gen) in (
    ( ( true /\ (Instruction__random_reg__result_subtype___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "reset" defined at a-nudira.ads:54 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__reset___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 val reset 
   (gen : Instruction__random_reg__generator.generator) (initiator : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at a-nudira.ads:55 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__reset__2___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__generator

 val reset__2 
   (gen : Instruction__random_reg__generator.generator) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "save" defined at a-nudira.ads:61 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__save___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__state
 use        Instruction__random_reg__generator
 use        Instruction__random_reg__state___axiom

 val save 
   (gen : Instruction__random_reg__generator.generator) (to_state : Instruction__random_reg__state.state__ref) : unit
  requires {  true }
  ensures {  (Instruction__random_reg__state___axiom.dynamic_invariant to_state.Instruction__random_reg__state.state__content True True True True) }
  writes {to_state}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__3" defined at a-nudira.ads:62 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__reset__3___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_reg__state
 use        Instruction__random_reg__generator

 val reset__3 
   (gen : Instruction__random_reg__generator.generator) (from_state : Instruction__random_reg__state.state) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "image" defined at a-nudira.ads:66 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__image___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Instruction__random_reg__image
 use        Instruction__random_reg__state
 use        Instruction__random_reg__state___axiom

 val image 
   (of_state : Instruction__random_reg__state.state) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_reg__image.image of_state)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom image__post_axiom :
  (forall of_state   : Instruction__random_reg__state.state [(Instruction__random_reg__image.image of_state)].
   ( (Instruction__random_reg__state___axiom.dynamic_invariant of_state True True True True) -> (let result = (Instruction__random_reg__image.image of_state) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "value" defined at a-nudira.ads:67 instantiated at instruction.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_reg__value___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Instruction__random_reg__state
 use        Instruction__random_reg__value
 use        Instruction__random_reg__state___axiom

 val value 
   (coded_state : Standard__string.string) : Instruction__random_reg__state.state
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_reg__value.value coded_state)) /\ true ) /\ (Instruction__random_reg__state___axiom.dynamic_invariant result True False True True) ) }
 
 axiom value__post_axiom :
  (forall coded_state   : Standard__string.string [(Instruction__random_reg__value.value coded_state)].
   ( (Standard__string___axiom.dynamic_invariant coded_state True True True True) -> (let result = (Instruction__random_reg__value.value coded_state) in (
    ( ( true /\ (Instruction__random_reg__state___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "random" defined at a-nudira.ads:52 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__random___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__random
 use        Instruction__random_offset__result_subtype___axiom
 use        Instruction__random_offset__generator
 use        Instruction__random_offset__generator___axiom

 val random 
   (gen : Instruction__random_offset__generator.generator) : int
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_offset__random.random gen)) /\ true ) /\ (Instruction__random_offset__result_subtype___axiom.dynamic_invariant result True False True True) ) }
 
 axiom random__post_axiom :
  (forall gen   : Instruction__random_offset__generator.generator [(Instruction__random_offset__random.random gen)].
   ( (Instruction__random_offset__generator___axiom.dynamic_invariant gen True True True True) -> (let result = (Instruction__random_offset__random.random gen) in (
    ( ( true /\ (Instruction__random_offset__result_subtype___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "reset" defined at a-nudira.ads:54 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__reset___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 val reset 
   (gen : Instruction__random_offset__generator.generator) (initiator : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at a-nudira.ads:55 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__reset__2___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__generator

 val reset__2 
   (gen : Instruction__random_offset__generator.generator) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "save" defined at a-nudira.ads:61 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__save___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__state
 use        Instruction__random_offset__generator
 use        Instruction__random_offset__state___axiom

 val save 
   (gen : Instruction__random_offset__generator.generator) (to_state : Instruction__random_offset__state.state__ref) : unit
  requires {  true }
  ensures {  (Instruction__random_offset__state___axiom.dynamic_invariant to_state.Instruction__random_offset__state.state__content True True True True) }
  writes {to_state}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__3" defined at a-nudira.ads:62 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__reset__3___axiom
 use import "_gnatprove_standard".Main
 use        Instruction__random_offset__state
 use        Instruction__random_offset__generator

 val reset__3 
   (gen : Instruction__random_offset__generator.generator) (from_state : Instruction__random_offset__state.state) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "image" defined at a-nudira.ads:66 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__image___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Instruction__random_offset__image
 use        Instruction__random_offset__state
 use        Instruction__random_offset__state___axiom

 val image 
   (of_state : Instruction__random_offset__state.state) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_offset__image.image of_state)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom image__post_axiom :
  (forall of_state   : Instruction__random_offset__state.state [(Instruction__random_offset__image.image of_state)].
   ( (Instruction__random_offset__state___axiom.dynamic_invariant of_state True True True True) -> (let result = (Instruction__random_offset__image.image of_state) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "value" defined at a-nudira.ads:67 instantiated at instruction.adb:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__random_offset__value___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Instruction__random_offset__state
 use        Instruction__random_offset__value
 use        Instruction__random_offset__state___axiom

 val value 
   (coded_state : Standard__string.string) : Instruction__random_offset__state.state
  requires {  true }
  ensures {  ( ( (result = (Instruction__random_offset__value.value coded_state)) /\ true ) /\ (Instruction__random_offset__state___axiom.dynamic_invariant result True False True True) ) }
 
 axiom value__post_axiom :
  (forall coded_state   : Standard__string.string [(Instruction__random_offset__value.value coded_state)].
   ( (Standard__string___axiom.dynamic_invariant coded_state True True True True) -> (let result = (Instruction__random_offset__value.value coded_state) in (
    ( ( true /\ (Instruction__random_offset__state___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "putreg" defined at instruction.adb:65, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__putreg___axiom
 use import "_gnatprove_standard".Main

 val putreg 
   (r : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "putoffset" defined at instruction.adb:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Instruction__putoffset___axiom
 use import "_gnatprove_standard".Main

 val putoffset 
   (offs : int) : unit
  requires {  true }
  ensures {  true }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "instruction" defined at instruction.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Instruction__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Instruction__num_regs
 use        Instruction__memory_size
 use        Standard__integer___axiom
 use        Instruction__num_regs___axiom
 use        Instruction__memory_size___axiom

 let def #"instruction.ads" 2 0 0#"GP_Subp:instruction.ads:2" "W:diverges:N" 
   (__void_param : unit)
  requires { #"instruction.ads" 2 0 0# true }
  ensures { #"instruction.ads" 2 0 0# true }
   =
  ( (#"instruction.ads" 2 0 0# ());
  (#"instruction.ads" 5 0 0# ());
  (#"instruction.ads" 8 0 0# ( #"instruction.ads" 8 0 0# abstract ensures {true}(let _ = 32 in (
   ()))
   end ;
  #"instruction.ads" 8 0 0# assume { #"instruction.ads" 8 0 0# (Standard__integer___axiom.dynamic_invariant Instruction__num_regs.num_regs True False True True) } ));
  (#"instruction.ads" 12 0 0# ());
  (#"instruction.ads" 15 0 0# ( #"instruction.ads" 15 0 0# abstract ensures {true}(let _ = 65536 in (
   ()))
   end ;
  #"instruction.ads" 15 0 0# assume { #"instruction.ads" 15 0 0# (Standard__integer___axiom.dynamic_invariant Instruction__memory_size.memory_size True False True True) } ));
  (#"instruction.ads" 19 0 0# ());
  (#"instruction.ads" 22 0 0# ());
  (#"instruction.ads" 22 0 0# ());
  (#"instruction.ads" 22 0 0# ());
  (#"instruction.ads" 25 0 0# ());
  (#"instruction.ads" 25 0 0# ());
  (#"instruction.ads" 70 0 0# ());
  (#"instruction.ads" 71 0 0# ());
  (#"instruction.ads" 74 0 0# ());
  (#"instruction.ads" 75 0 0# ());
  (#"instruction.ads" 78 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ());
  (#"instruction.ads" 79 0 0# ()) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at instruction.ads:70, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Instruction__init__subprogram_def
 use import "_gnatprove_standard".Main

 let def #"instruction.ads" 70 0 0#"W:diverges:N" "GP_Subp:instruction.ads:70" 
   (__void_param : unit)
  requires { #"instruction.ads" 70 0 0# true }
  ensures { #"instruction.ads" 70 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram instruction.ads:70 *)
  ;
  #"instruction.ads" 70 0 0# assume { #"instruction.ads" 70 0 0# true };
  () (* Check for RTE in the Pre of the subprogram instruction.ads:70 *)
  ;
  #"instruction.ads" 70 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram instruction.ads:70 *)
  ;
  #"instruction.ads" 70 0 0# assume { #"instruction.ads" 70 0 0# true } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "generaterandominstr" defined at instruction.ads:74, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Instruction__generaterandominstr__subprogram_def
 use import "_gnatprove_standard".Main
 use        Instruction__instr
 use        Instruction__instr___axiom
 use        Instruction__generaterandominstr__inst
 use        Instruction__opcode___axiom
 use        Instruction__reg___axiom
 use        Instruction__offset___axiom
 use        Instruction__instr___axiom
 use        Instruction__generaterandominstr__inst___axiom

 let def #"instruction.ads" 74 0 0#"W:diverges:N" "GP_Subp:instruction.ads:74" 
   (__void_param : unit)
  requires { #"instruction.ads" 74 0 0# true }
  ensures { #"instruction.ads" 74 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram instruction.ads:74 *)
  ;
  #"instruction.ads" 74 0 0# assume { #"instruction.ads" 74 0 0# (Instruction__instr___axiom.dynamic_invariant { Instruction__instr.__split_fields = Instruction__generaterandominstr__inst.inst__split_fields.Instruction__instr.__split_fields__content; Instruction__instr.__split_discrs = Instruction__generaterandominstr__inst.inst__split_discrs.Instruction__instr.__split_discrs__content; Instruction__instr.attr__constrained = Instruction__generaterandominstr__inst.inst__attr__constrained } False False True True) };
  #"instruction.ads" 74 0 0# assume { #"instruction.ads" 74 0 0# true };
  () (* Check for RTE in the Pre of the subprogram instruction.ads:74 *)
  ;
  #"instruction.ads" 74 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram instruction.ads:74 *)
  ;
  #"instruction.ads" 74 0 0# assume { #"instruction.ads" 74 0 0# true } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "debugprintinstr" defined at instruction.ads:78, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Instruction__debugprintinstr__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Debug__put___axiom
 use        Debug__put__3___axiom
 use        Instruction__putreg___axiom
 use        Instruction__putoffset___axiom
 use        Instruction__opcode
 use        Instruction__opcode__rep
 use        Instruction__reg
 use        Instruction__reg__rep
 use        Instruction__offset
 use        Instruction__offset__rep
 use        Instruction__instr
 use        Instruction__instr___axiom
 use        Instruction__debugprintinstr__inst
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Instruction__opcode___axiom
 use        Instruction__reg___axiom
 use        Instruction__offset___axiom
 use        Instruction__instr___axiom
 use        Instruction__debugprintinstr__inst___axiom
 use        Debug__put___axiom
 use        Debug__put__3___axiom
 use        Instruction__putreg___axiom
 use        Instruction__putoffset___axiom

 let def #"instruction.ads" 78 0 0#"W:diverges:N" "GP_Subp:instruction.ads:78" 
   (__void_param : unit)
  requires { #"instruction.ads" 78 0 0# true }
  ensures { #"instruction.ads" 78 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram instruction.ads:78 *)
  ;
  #"instruction.ads" 78 0 0# assume { #"instruction.ads" 78 0 0# (Instruction__instr___axiom.dynamic_invariant Instruction__debugprintinstr__inst.inst True False True True) };
  #"instruction.ads" 78 0 0# assume { #"instruction.ads" 78 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram instruction.ads:78 *)
  ;
  () (* Check for RTE in the Pre of the subprogram instruction.ads:78 *)
  ;
  #"instruction.ads" 78 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram instruction.ads:78 *)
  ;
  #"instruction.ads" 78 0 0# assume { #"instruction.ads" 78 0 0# true };
  #"instruction.ads" 78 0 0# try
   ( (#"instruction.adb" 76 0 0# ());
   (#"instruction.adb" 76 0 0# ());
   ( "GP_Sloc:instruction.adb:78:7" (#"instruction.adb" 78 0 0# ()) );
   ( "GP_Sloc:instruction.adb:78:7" (#"instruction.adb" 78 0 0# ( (Debug__put___axiom.put((Standard__string.to_string((Instruction__opcode.attr__ATTRIBUTE_IMAGE((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))))))))) )) );
   ( "GP_Sloc:instruction.adb:79:7" (#"instruction.adb" 79 0 0# (if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 1)) then (
    ( ( "GP_Sloc:instruction.adb:81:13" (#"instruction.adb" 81 0 0# ()) );
    ( "GP_Sloc:instruction.adb:81:13" (#"instruction.adb" 81 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:81:22" (#"instruction.adb" 81 0 0# ()) );
    ( "GP_Sloc:instruction.adb:81:22" (#"instruction.adb" 81 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 81 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:instruction.adb:81:33" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Id:0" "comment:            Put(HT); PutReg(Inst.AddRd);
                                ^ instruction.adb:81:33:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" (Instruction__instr.rec__instruction__instr__addrd_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:82:13" (#"instruction.adb" 82 0 0# ()) );
    ( "GP_Sloc:instruction.adb:82:13" (#"instruction.adb" 82 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:82:22" (#"instruction.adb" 82 0 0# ()) );
    ( "GP_Sloc:instruction.adb:82:22" (#"instruction.adb" 82 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 82 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:82:33" "GP_Id:1" "comment:            Put(HT); PutReg(Inst.AddRs1);
                                ^ instruction.adb:82:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__addrs1_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:83:13" (#"instruction.adb" 83 0 0# ()) );
    ( "GP_Sloc:instruction.adb:83:13" (#"instruction.adb" 83 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:83:22" (#"instruction.adb" 83 0 0# ()) );
    ( "GP_Sloc:instruction.adb:83:22" (#"instruction.adb" 83 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 83 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:83:33" "GP_Id:2" "comment:            Put(HT); PutReg(Inst.AddRs2);
                                ^ instruction.adb:83:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__addrs2_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:84:13" (#"instruction.adb" 84 0 0# #"instruction.adb" 84 0 0# raise Return__exc) ) )) else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 2)) then (
    ( ( "GP_Sloc:instruction.adb:86:13" (#"instruction.adb" 86 0 0# ()) );
    ( "GP_Sloc:instruction.adb:86:13" (#"instruction.adb" 86 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:86:22" (#"instruction.adb" 86 0 0# ()) );
    ( "GP_Sloc:instruction.adb:86:22" (#"instruction.adb" 86 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 86 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:86:33" "GP_Id:3" "comment:            Put(HT); PutReg(Inst.SubRd);
                                ^ instruction.adb:86:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__subrd_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:87:13" (#"instruction.adb" 87 0 0# ()) );
    ( "GP_Sloc:instruction.adb:87:13" (#"instruction.adb" 87 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:87:22" (#"instruction.adb" 87 0 0# ()) );
    ( "GP_Sloc:instruction.adb:87:22" (#"instruction.adb" 87 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 87 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:87:33" "GP_Id:4" "comment:            Put(HT); PutReg(Inst.SubRs1);
                                ^ instruction.adb:87:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__subrs1_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:88:13" (#"instruction.adb" 88 0 0# ()) );
    ( "GP_Sloc:instruction.adb:88:13" (#"instruction.adb" 88 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:88:22" (#"instruction.adb" 88 0 0# ()) );
    ( "GP_Sloc:instruction.adb:88:22" (#"instruction.adb" 88 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 88 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:88:33" "GP_Id:5" "comment:            Put(HT); PutReg(Inst.SubRs2);
                                ^ instruction.adb:88:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__subrs2_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:89:13" (#"instruction.adb" 89 0 0# #"instruction.adb" 89 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 3)) then (
    ( ( "GP_Sloc:instruction.adb:91:13" (#"instruction.adb" 91 0 0# ()) );
    ( "GP_Sloc:instruction.adb:91:13" (#"instruction.adb" 91 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:91:22" (#"instruction.adb" 91 0 0# ()) );
    ( "GP_Sloc:instruction.adb:91:22" (#"instruction.adb" 91 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 91 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:91:33" "GP_Id:6" "comment:            Put(HT); PutReg(Inst.MulRd);
                                ^ instruction.adb:91:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__mulrd_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:92:13" (#"instruction.adb" 92 0 0# ()) );
    ( "GP_Sloc:instruction.adb:92:13" (#"instruction.adb" 92 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:92:22" (#"instruction.adb" 92 0 0# ()) );
    ( "GP_Sloc:instruction.adb:92:22" (#"instruction.adb" 92 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 92 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:92:33" "GP_Id:7" "comment:            Put(HT); PutReg(Inst.MulRs1);
                                ^ instruction.adb:92:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__mulrs1_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:93:13" (#"instruction.adb" 93 0 0# ()) );
    ( "GP_Sloc:instruction.adb:93:13" (#"instruction.adb" 93 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:93:22" (#"instruction.adb" 93 0 0# ()) );
    ( "GP_Sloc:instruction.adb:93:22" (#"instruction.adb" 93 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 93 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:93:33" "GP_Id:8" "comment:            Put(HT); PutReg(Inst.MulRs2);
                                ^ instruction.adb:93:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__mulrs2_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:94:13" (#"instruction.adb" 94 0 0# #"instruction.adb" 94 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 4)) then (
    ( ( "GP_Sloc:instruction.adb:96:13" (#"instruction.adb" 96 0 0# ()) );
    ( "GP_Sloc:instruction.adb:96:13" (#"instruction.adb" 96 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:96:22" (#"instruction.adb" 96 0 0# ()) );
    ( "GP_Sloc:instruction.adb:96:22" (#"instruction.adb" 96 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 96 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:96:33" "GP_Id:9" "comment:            Put(HT); PutReg(Inst.DivRd);
                                ^ instruction.adb:96:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__divrd_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:97:13" (#"instruction.adb" 97 0 0# ()) );
    ( "GP_Sloc:instruction.adb:97:13" (#"instruction.adb" 97 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:97:22" (#"instruction.adb" 97 0 0# ()) );
    ( "GP_Sloc:instruction.adb:97:22" (#"instruction.adb" 97 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 97 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:97:33" "GP_Id:10" "comment:            Put(HT); PutReg(Inst.DivRs1);
                                ^ instruction.adb:97:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__divrs1_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:98:13" (#"instruction.adb" 98 0 0# ()) );
    ( "GP_Sloc:instruction.adb:98:13" (#"instruction.adb" 98 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:98:22" (#"instruction.adb" 98 0 0# ()) );
    ( "GP_Sloc:instruction.adb:98:22" (#"instruction.adb" 98 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 98 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:98:33" "GP_Id:11" "comment:            Put(HT); PutReg(Inst.DivRs2);
                                ^ instruction.adb:98:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__divrs2_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:99:13" (#"instruction.adb" 99 0 0# #"instruction.adb" 99 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 5)) then (
    ( ( "GP_Sloc:instruction.adb:101:13" (#"instruction.adb" 101 0 0# ()) );
    ( "GP_Sloc:instruction.adb:101:13" (#"instruction.adb" 101 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:101:22" (#"instruction.adb" 101 0 0# ()) );
    ( "GP_Sloc:instruction.adb:101:22" (#"instruction.adb" 101 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 101 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:101:33" "GP_Id:12" "comment:            Put(HT); PutReg(Inst.RetRs);
                                ^ instruction.adb:101:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__retrs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:102:13" (#"instruction.adb" 102 0 0# #"instruction.adb" 102 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 6)) then (
    ( ( "GP_Sloc:instruction.adb:104:13" (#"instruction.adb" 104 0 0# ()) );
    ( "GP_Sloc:instruction.adb:104:13" (#"instruction.adb" 104 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:104:22" (#"instruction.adb" 104 0 0# ()) );
    ( "GP_Sloc:instruction.adb:104:22" (#"instruction.adb" 104 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 104 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:104:33" "GP_Id:13" "comment:            Put(HT); PutReg(Inst.LdrRd);
                                ^ instruction.adb:104:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__ldrrd_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:105:13" (#"instruction.adb" 105 0 0# ()) );
    ( "GP_Sloc:instruction.adb:105:13" (#"instruction.adb" 105 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:105:22" (#"instruction.adb" 105 0 0# ()) );
    ( "GP_Sloc:instruction.adb:105:22" (#"instruction.adb" 105 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 105 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:105:33" "GP_Id:14" "comment:            Put(HT); PutReg(Inst.LdrRs);
                                ^ instruction.adb:105:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__ldrrs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:106:13" (#"instruction.adb" 106 0 0# ()) );
    ( "GP_Sloc:instruction.adb:106:13" (#"instruction.adb" 106 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:106:22" (#"instruction.adb" 106 0 0# ()) );
    ( "GP_Sloc:instruction.adb:106:22" (#"instruction.adb" 106 0 0# ( (Instruction__putoffset___axiom.putoffset((Instruction__offset__rep.to_rep((#"instruction.adb" 106 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Sloc:instruction.adb:106:36" "GP_Id:15" "comment:            Put(HT); PutOffset(Inst.LdrOffs);
                                   ^ instruction.adb:106:36:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putoffset__selectcomp" (Instruction__instr.rec__instruction__instr__ldroffs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:107:13" (#"instruction.adb" 107 0 0# #"instruction.adb" 107 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 7)) then (
    ( ( "GP_Sloc:instruction.adb:109:13" (#"instruction.adb" 109 0 0# ()) );
    ( "GP_Sloc:instruction.adb:109:13" (#"instruction.adb" 109 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:109:22" (#"instruction.adb" 109 0 0# ()) );
    ( "GP_Sloc:instruction.adb:109:22" (#"instruction.adb" 109 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 109 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:109:33" "GP_Id:16" "comment:            Put(HT); PutReg(Inst.StrRa);
                                ^ instruction.adb:109:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__strra_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:110:13" (#"instruction.adb" 110 0 0# ()) );
    ( "GP_Sloc:instruction.adb:110:13" (#"instruction.adb" 110 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:110:22" (#"instruction.adb" 110 0 0# ()) );
    ( "GP_Sloc:instruction.adb:110:22" (#"instruction.adb" 110 0 0# ( (Instruction__putoffset___axiom.putoffset((Instruction__offset__rep.to_rep((#"instruction.adb" 110 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putoffset__selectcomp" "GP_Sloc:instruction.adb:110:36" "GP_Id:17" "comment:            Put(HT); PutOffset(Inst.StrOffs);
                                   ^ instruction.adb:110:36:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__stroffs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:111:13" (#"instruction.adb" 111 0 0# ()) );
    ( "GP_Sloc:instruction.adb:111:13" (#"instruction.adb" 111 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:111:22" (#"instruction.adb" 111 0 0# ()) );
    ( "GP_Sloc:instruction.adb:111:22" (#"instruction.adb" 111 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 111 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:111:33" "GP_Id:18" "comment:            Put(HT); PutReg(Inst.StrRb);
                                ^ instruction.adb:111:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__strrb_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:112:13" (#"instruction.adb" 112 0 0# #"instruction.adb" 112 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 8)) then (
    ( ( "GP_Sloc:instruction.adb:114:13" (#"instruction.adb" 114 0 0# ()) );
    ( "GP_Sloc:instruction.adb:114:13" (#"instruction.adb" 114 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:114:22" (#"instruction.adb" 114 0 0# ()) );
    ( "GP_Sloc:instruction.adb:114:22" (#"instruction.adb" 114 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 114 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:114:33" "GP_Id:19" "comment:            Put(HT); PutReg(Inst.MovRd);
                                ^ instruction.adb:114:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__movrd_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:115:13" (#"instruction.adb" 115 0 0# ()) );
    ( "GP_Sloc:instruction.adb:115:13" (#"instruction.adb" 115 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:115:22" (#"instruction.adb" 115 0 0# ()) );
    ( "GP_Sloc:instruction.adb:115:22" (#"instruction.adb" 115 0 0# ( (Instruction__putoffset___axiom.putoffset((Instruction__offset__rep.to_rep((#"instruction.adb" 115 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putoffset__selectcomp" "GP_Sloc:instruction.adb:115:36" "GP_Id:20" "comment:            Put(HT); PutOffset(Inst.MovOffs);
                                   ^ instruction.adb:115:36:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__movoffs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:116:13" (#"instruction.adb" 116 0 0# #"instruction.adb" 116 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 9)) then (
    ( ( "GP_Sloc:instruction.adb:118:13" (#"instruction.adb" 118 0 0# ()) );
    ( "GP_Sloc:instruction.adb:118:13" (#"instruction.adb" 118 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:118:22" (#"instruction.adb" 118 0 0# ()) );
    ( "GP_Sloc:instruction.adb:118:22" (#"instruction.adb" 118 0 0# ( (Instruction__putoffset___axiom.putoffset((Instruction__offset__rep.to_rep((#"instruction.adb" 118 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putoffset__selectcomp" "GP_Sloc:instruction.adb:118:36" "GP_Id:21" "comment:            Put(HT); PutOffset(Inst.JmpOffs);
                                   ^ instruction.adb:118:36:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__jmpoffs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:119:13" (#"instruction.adb" 119 0 0# #"instruction.adb" 119 0 0# raise Return__exc) ) ))  else if (((Instruction__opcode__rep.to_rep((Instruction__instr.rec__instruction__instr__op((Instruction__instr.__split_discrs(Instruction__debugprintinstr__inst.inst)))))) = 10)) then (
    ( ( "GP_Sloc:instruction.adb:121:13" (#"instruction.adb" 121 0 0# ()) );
    ( "GP_Sloc:instruction.adb:121:13" (#"instruction.adb" 121 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:121:22" (#"instruction.adb" 121 0 0# ()) );
    ( "GP_Sloc:instruction.adb:121:22" (#"instruction.adb" 121 0 0# ( (Instruction__putreg___axiom.putreg((Instruction__reg__rep.to_rep((#"instruction.adb" 121 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putreg__selectcomp" "GP_Sloc:instruction.adb:121:33" "GP_Id:22" "comment:            Put(HT); PutReg(Inst.JzRa);
                                ^ instruction.adb:121:33:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__jzra_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:122:13" (#"instruction.adb" 122 0 0# ()) );
    ( "GP_Sloc:instruction.adb:122:13" (#"instruction.adb" 122 0 0# ( (Debug__put__3___axiom.put__3(9)) )) );
    ( "GP_Sloc:instruction.adb:122:22" (#"instruction.adb" 122 0 0# ()) );
    ( "GP_Sloc:instruction.adb:122:22" (#"instruction.adb" 122 0 0# ( (Instruction__putoffset___axiom.putoffset((Instruction__offset__rep.to_rep((#"instruction.adb" 122 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DISCRIMINANT_CHECK" "GP_Shape:case__call_putoffset__selectcomp" "GP_Sloc:instruction.adb:122:36" "GP_Id:23" "comment:            Put(HT); PutOffset(Inst.JzOffs);
                                   ^ instruction.adb:122:36:VC_DISCRIMINANT_CHECK" (Instruction__instr.rec__instruction__instr__jzoffs_(Instruction__debugprintinstr__inst.inst)) )))))) )) );
    ( "GP_Sloc:instruction.adb:123:13" (#"instruction.adb" 123 0 0# #"instruction.adb" 123 0 0# raise Return__exc) ) )) else (
    ( "GP_Sloc:instruction.adb:125:13" (#"instruction.adb" 125 0 0# #"instruction.adb" 125 0 0# raise Return__exc) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end
